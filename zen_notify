#! /bin/bash

#  Zen_notify
#  mar. oct. 11 16:21:02 CEST 2016
#  Copyright  2010-2016  PirateProd
#  <wildtruc@noneltd.net>
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with main.c;if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA

## basics
local_nvdir=/home/$USER/.zenvidia
nvdir=/usr/local/zenvidia
script_conf=$nvdir/script.conf
basic_conf=$local_nvdir/basic.conf
nvtmp=$local_nvdir/notify
deficon=swiss_knife
[ $script_conf ] || exit 0
. $script_conf
. $basic_conf
## script need to sleep during the desktop session boot time.
# sleep 20
ifs=$IFS

[ -d $nvtmp ] || mkdir -p $nvtmp
ARCH=$(uname -p)
drv_temp=$(mktemp --tmpdir zen_notif-XXXX)
drv_list=$nvtmp/drvlist
last_update=$nvtmp/last_update
last_beta=$nvtmp/last_beta
local_src=$local_nvdir/src
[ -d $local_src ] || mkdir -p $local_src

if [[ ! -e home/$USER/.config/autostart/zen_notify.desktop ]]; then
	zen_git=$(find -P $HOME -maxdepth 4 -name "zenvidia")
	if [[ -d $zen_git && ! -e /home/$USER/.config/autostart/zen_notify.desktop ]]; then
		cp -f $zen_git/desktop_files/zen_notify.desktop /home/$USER/.config/autostart/
	fi
fi
driver_ctrl(){
## get all driver list.
wget -q -O $drv_temp https://$nvidia_ftp-$ARCH/
## get latest.txt file.
wget -q -O $last_update https://$nvidia_ftp-$ARCH/latest.txt
cat $drv_temp| sed -En "s/^.*href.*'(.*)\/'>.*$/\1/p" > $drv_list
cat $drv_temp| sed -En "s/^.*href.*'(.*)\/'>.*$/\1/p"| tail -n1 > $last_beta
LAST_DRV=$(cat $last_update | awk '{ print $1 }')
LAST_BETA=$(cat $last_beta)

## driver version could be in the form xxx.xx.xx or xxx.xx
## it is needed to short it to max 6 carater to make a real diff between versions.
if [ -s $nvdir/version.txt ]; then
	ver_n=$(cat $nvdir/version.txt| wc -m)
	if [ $ver_n -le 6 ]; then
		version=$(cat $nvdir/version.txt| sed -n "s|\.||g;p")00
	else
		version=$(cat $nvdir/version.txt| sed -n "s|\.||g;p")
	fi
else
	version=$(modinfo -F version nvidia)
	ver_n=$(wc -m <<< $version)
	if [ $ver_n -le 6 ]; then
		version=$(modinfo -F version nvidia| sed -n "s|\.||g;p")00
	else
		version=$(modinfo -F version nvidia| sed -n "s|\.||g;p")
	fi
fi
bet_n=$(wc -m <<< "$LAST_DRV")
off_n=$(wc -m <<< "$LAST_BETA")
## line is count as caracter, so 6 become 7.
if [ $off_n -le 7 ]; then
	offi_short=$(echo "$LAST_DRV"| sed -n "s|\.||g;p")00
elif [ $bet_n -le 7 ]; then
	beta_short=$(printf "$LAST_BETA"| sed -n "s|\.||g;p")00
else
	offi_short=$(echo "$LAST_DRV"| sed -n "s|\.||g;p")
	beta_short=$(printf "$LAST_BETA"| sed -n "s|\.||g;p")
fi
[ $beta_short -gt 0 ]|| beta_short=0
[ $version -gt 0 ]|| version=0
if [ $beta_short -gt 0 ]; then
	if [ $beta_short -eq $offi_short ]; then
		DRV_LIST=( "$LAST_DRV, official and beta drivers,$offi_short" )
	else
		DRV_LIST=( "$LAST_DRV, official driver,$offi_short" "$LAST_BETA, beta driver,$beta_short" )
	fi
else
	DRV_LIST=( "$LAST_DRV, official drivers,$offi_short" )
fi
if [ ${#DRV_LIST[@]} -gt 0 ]; then
	IFS=$(echo -en "\n\b")
	cnt=0
	for drv_line in ${DRV_LIST[@]}; do
		driver=$(printf "$drv_line"|cut -d',' -f1)
		release=$(printf "$drv_line"|cut -d',' -f2)
		drv_short=$(printf "$drv_line"|cut -d',' -f3)
		if [ $drv_short -gt $version ]; then
			if [ $cnt -eq 0 ]; then sol='';eol=''; else sol='\n';eol=''; fi
			if [[ $(egrep -c "$driver" $drv_list) -gt 0 ]]; then
				_driver_notif+=( "$sol<b>$driver</b> $release update.$eol" )
			else
				_driver_notif+=( "$sol<b>$driver</b> $release update.\n<i>(not dowloadable yet)</i>$eol" )
			fi
			((cnt++))
		fi
	done
	if [[ $drv_short -gt $version || ! $(echo -e "${DRV_LIST[*]}") =~ $(modinfo -F version nvidia) ]]; then
		notif_msg+='Nvidia driver '
		driver_up=1
	else
		driver_up=0
	fi
	IFS=$ifs
else
	driver_up=0
fi
}
source_ctrl(){
	if [ $driver_up -gt 0 ]; then notif_txt='and Zenvidia'; line='\n'; else notif_txt='Zenvidia'; line=''; fi
 	tmp_git_local=$(find -P $HOME -maxdepth 4 -name "zenvidia" -type d)
	tmp_git_src=$(mktemp -d --tmpdir tmp_git.XXX)
	IFS=$(echo -en "\n\b")
	CHECK_GIT_REPO(){
		local_date=$(env LANG=En_en date +%Y''%m''%d)
		# extract date from log
		git_rm_fetch_date=$(git log origin -n 1 | sed -n '/Date/p'| awk '{print $3" "$4" "$6}')
		# convert date to comparable number
		git_rm_date=$(date -d "$git_rm_fetch_date" +%Y''%m''%d)
		# extract version line
		git_rm_version=$(git log origin -n 1 | egrep "v[0-9].[0-9].[0-9]{,2}")
		if [ -d $tmp_git_local ]; then
			pushd $tmp_git_local
			# before acting, we need to know the last pull record in local dir.
			git_local_pull_date=$(cat .git/logs/refs/heads/master| grep "clone\|pull"|awk '{print $5}'|sed -n '$p')
			git_pull_date=$(date -d "@$git_local_pull_date" +%Y''%m''%d)
			# then, ftech and look into local git repos.
			git fetch origin
			# check if mutiple entries exist and use pre_local_change var as number of push for version.
			pre_local_change=$(git whatchanged origin | grep -c "$git_rm_version")
			git_rm_fetch_log=$(git log origin -n $pre_local_change | sed -n "/-/,/-/p")
			git_local_change=$(git whatchanged origin -n $pre_local_change | grep "^:" | awk '{print $6}')
			popd
			if [ ${#git_local_change[*]} -gt 0 ]; then
				# format files change list.
				for change in ${git_local_change[@]}; do
					git_change_msg+=$(echo -e "$change"|sed -En "s/^(.*)$/* \1\n     /g;p")
				done
			fi
			if [ $(grep -c "$git_rm_fetch_date" $local_src/zen_git.log) -eq 0 ]; then
				# be sure than a change log line exist. In none, just display files list.
				if [ $(grep -c "-" <<< ${git_rm_fetch_log[*]}) -gt 0 ]; then
				cat <<-LOG >> $local_src/zen_git.log
					$git_rm_fetch_date :$git_rm_version
					$git_rm_fetch_log
					     Changed remote file(s) :
					     ${git_change_msg[@]}
				LOG
				else
				cat <<-LOG >> $local_src/zen_git.log
					$git_rm_fetch_date :$git_rm_version
					     Changed remote file(s) :
					     ${git_change_msg[@]}
				LOG
				fi
			fi
		fi
		if [ $git_pull_date -lt $git_rm_date ]; then
			# if last pull/clone date is lower than the remote's, display update message.
			notif_msg+="$notif_txt "
			_driver_notif+=("$line\zenvidia git repo update.\n$git_rm_fetch_date $git_rm_version")
		fi
	}
	# clone remote .git dir only to get changes.
	pushd $tmp_git_src
	git clone -n --depth=1 $zenvidia_git .
	# then check diff in date, then in data, if local repos exist.
	CHECK_GIT_REPO
	popd
	IFS=$ifs
}
notifying(){
	notify-send -t 5000 -u low -i $icon_set "${notif_msg[*]}update" "$(echo "${_driver_notif[@]}")"
}
usage_help(){
	printf "# Usage : zen_notify option,where option is:\n"
	printf "\t -z : check nvidia & zenvidia.\n"
	printf "\t -n : check nvidia only.\n"
	printf "\t -h : this help.\n"
}
icon_set=$deficon
test $# -gt 0 || usage_help
while [ $# -gt 0 ]
	getopts "z n h" OPT; do
	case $OPT in
		z)
		driver_ctrl
		source_ctrl
		notifying
		;;
		n) driver_ctrl
		if [ $driver_up -gt 0 ]; then notifying; fi
		;;
		h) usage_help ;;
	esac
done
