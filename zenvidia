#! /bin/bash

#  Zenvidia
#  Sat Feb  6 16:58:20 2010
#  Copyright  2010-2016  PirateProd
#  <wildtruc@noneltd.net>
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with main.c;if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA

### VARS
## Master Vars.
install_dir=/usr/local						# default tools & system install directory
nvdir=$install_dir/NVIDIA						# default Zenvidia directory
conf_dir="$install_dir/NVIDIA"
#conf_dir="/usr/local/etc"						# default conf directory << TODO ?
conf_dir=$nvdir
basic_conf=$nvdir/basic.conf
script_conf=$nvdir/script.conf					# Zenvidia conf file
color_conf=$nvdir/color.conf					# Zenvidia UI font color file
croot="$install_dir/DRIVERS"					# language packs
locale="$nvdir/translations"					# language packs
nvtar="$nvdir/tgz"								# archies directory
nvtmp="$nvdir/temp"								# extract temp directory
buildtmp="$nvdir/build"							# build temp directory
nvlog="$nvdir/log"								# logs directory
nvdl="$nvdir/release"							# downlaod driver backups directory
nvupdate="$nvdir/update"						# update temp directory
nvbackup="$nvdir/backups"
logfile="--log-file-name=$nvlog/install.log"	# nvidia-installer options
temp="--tmpdir=$buildtmp"						# nvidia-installer option: install temp dir
dltemp="--tmpdir=$nvtmp"						# nvidia-installer option: update temp dir
kernel="--kernel-install-path"
help_pages="$install_dir/share/doc/NVIDIA_GLX-1.0"
docs="--documentation-prefix=$install_dir"
profile="--application-profile-path=$install_dir/share/nvidia"
#reportlog=/tmp/nv_report.tmp
reportlog=$(mktemp --tmpdir "$(basename $0).XXX")
#kernel_src="--kernel-source-path"
xt_hold=0
xt_delay=4
opts_setted=0

################################################
## DEVELOPPEMENT only, DON'T EDIT OR UNCOMMENT'
#devel=/home/mike/Devel/NVIDIA/zenvidia
#script_conf=$devel/script.conf.devel
#basic_conf=$devel/basic.conf.devel
################################################

## configuration file
# zenity --width=250 --error --text=""
if [ ! -s $script_conf ]; then zenity --width=250 --error --icon-name=xkill --text="Script's config file missing."; exit 0; fi
. $script_conf
. $basic_conf
. $color_conf

#. $devel/color.conf
#locale=$devel/translations/
## multi distro system bianries compatibilities.
d_lspci=$(find /usr/{bin,sbin,local/bin,local/sbin} -name lspci)
d_modinfo=$(find /usr/{bin,sbin,local/bin,local/sbin} -name modinfo)
d_sys_c=$(find /usr/{bin,sbin,local/bin,local/sbin} -name systemctl)
d_nv_installer=$(find /usr/{bin,local/bin} -name "nvidia-installer")

### FUNCTIONS
ID(){
## graphic cards id
	i=0
	unset pci_n
	vnd_dev_list=( "GeForce" "Titan" "Quadro" "NVS" "Tesla" "GRID" )
	for vnd_list in {10de,8086,1022}; do
		if [[ $($d_lspci -nn|grep VGA|grep -o "$vnd_list:") != '' ]]; then
			if [ $($d_lspci -nn|grep VGA|grep -c "$vnd_list:") = 1 ]; then
				vga_list=$vnd_list
			else
				vga_list=$($d_lspci -nn|grep VGA|grep "$vnd_list"|awk '{print $1}')
			fi
			for pci_list in $vga_list; do
				pci_bus=$($d_lspci -nn|grep VGA|grep "$pci_list"|awk '{print $1}')
				pci_id=$($d_lspci -n|grep "$pci_bus"|sed -n 's/^.*:.*://;s/ .*$//p')
				vnd_nm=$(cat /usr/share/hwdata/pci.ids | sed -n 's/\t/*/g;s/  /#/p'| \
						grep "$vnd_list"|grep -v '*'| sed -n 's/^.*#//p')
				vnd_id=$vnd_list
				detect=$($d_lspci|grep "$pci_bus")
				if [[ $(printf "$detect"| grep -o "GeForce\|TITAN\|Quadro\|NVS\|Tesla\|GRID") != '' ]]; then
					for pci_card in $vnd_dev_list; do
						detected=$($d_lspci|grep "$pci_bus"|egrep -i "$pci_card")
						if [[ "$detected" != '' ]]; then
							dev_nm=$(printf "$detect"|sed -n "s/^.*$pci_card/$pci_card/;s/\( (\|] (\).*$//p")
						fi
					done
				else
					dev_nm=$(printf "Default Graphic")
				fi
				if [[ $pci_bus != '' ]]; then
				# list order : 0>nb, 1>pci slot, 2>pci id, 3>vendor, 4>device_name
					pci_n+=("$i","$pci_bus","$pci_id","$vnd_id","$vnd_nm","$dev_nm")
					((i++))
				fi
			done
		fi
	done
	## pci list: variant.
#	vga_pci_list=( $($d_lspci -nnmm| egrep "\ ()VGA|3D)\ ") )
	
	ifs=$IFS
	IFS=$(echo -en "\n\b")
	pci_dev="${pci_n[*]}"
	pci_dev_nb=$(printf "$pci_dev"|cut -d, -f1)
	IFS=$ifs
	unset dev_n dev slot slot_id vnd vnd_id
	for c in $pci_dev_nb; do
		var="${pci_n[$c]}"
		dev_n+=("$(printf "$var"|cut -d, -f1)")
		dev+=("$(printf "$var"|cut -d, -f6)")
		slot+=("$(printf "$var"|cut -d, -f2)")
		slot_id+=("$(printf "$var"|cut -d, -f3)")
		vnd+=("$(printf "$var"|cut -d, -f5)")
		vnd_id+=("$(printf "$var"|cut -d, -f4)")
	done
	board=$(printf "${pci_n[0]}"| cut -d, -f6)
}
distro_id(){
	unset distro_list
	if [ -f /proc/version ] ; then
		distro_list=( 'Ubuntu' 'Debian' 'Fedora' 'Red\ Hat' 'Mandriva' 'mageia' )
		for distro in "${distro_list[@]}" ; do
			proc_version=$(cat /proc/version | grep -c "$distro")
			if [ $proc_version -gt 0 ] ; then
				distro_version=$distro
				if [[ $(printf "$distro"| grep "\\ ") ]]; then
					plug_version=$(printf "$distro"| sed -n "s/\\\ /_/p").conf
				else
					plug_version=$distro.conf
				fi
			fi
		done
	fi
}
distro(){
	if [[ -s $conf_dir/distro/$plug_version ]]; then
		. $conf_dir/distro/$plug_version
	else
		zenity --width=250 --error --text="$j$msg_00_12$end\n$v(gcc,lftp,dkms,xterm)$end"
		exit 0
	fi
}

# elf types
libclass(){
	# define distro base ELF type
	if [ $(uname -p |grep -c "64") -gt 0 ] ; then
		ELF_TYPE="64"
	else
		ELF_TYPE=""
	fi
}
## system arch
arch(){
ARCH=$(uname -p)
if [ $ARCH != "i686\|i586\|i386\|x86" ] ; then
	RUN_PCK="pkg2"
else
	ARCH="x86"
	RUN_PCK="pkg1"
fi
# be sure that /usr/local/ for lib32 is in LD path
if [ $(ldconfig -p |grep -c "$install_dir/$master$ELF_32") -eq 0 ]; then
	printf "$install_dir/$master$ELF_32" > /etc/ld.so.conf.d/local-lib32.conf
fi
}
efi_warnings(){
	zenity --width=450 --title="Zenvidia" --question \
	--text="$vB\THE SYSTEM IS BOOTING OVER UEFI FILE SYSTEM$end
$v\A PUBLIC KEY IS NEEDED TO COMPIL THE NVIDIA DRIVER,
THEN RECORDED IN THE UEFI DATABASE.\n
BEFORE ANY PROCESS TO START, SCRIPT NEED TO CREATE THAT KEY.$end
$vB\YOU SHALL REBOOT THE SYSTEM AFTER KEY GEN PROCESS$end"
}
# dependencies control
dep_control(){
	unset deplist
#	[ -x /usr/bin/lftp ]|| deplist+=("$p_lftp")
	[ -x /usr/bin/xterm ]|| deplist+=("$p_xterm")
	[ -x /usr/bin/make ]|| deplist+=("$p_gcc")
	[ -x /usr/bin/wget ]|| deplist+=("$p_wget")
	[ -x /usr/bin/git ]|| deplist+=("$p_git")
	[ -x /usr/sbin/dkms ]|| deplist+=("$p_dkms")
	[ -x /usr/bin/diff ]|| deplist+=("$p_diff")
	[ -x /usr/bin/patch ]|| deplist+=("$p_patch")
	if [ $dist_type -le 1 ]; then
		[ -d $kernel_src ]|| deplist+=("$p_kernel")
		[ -e /usr/include/ncurses/ncurses.h ]|| deplist+=("$p_ncurses")
		[ -e /usr/include/libkmod.h ]|| deplist+=("$p_kmod")
		[ -e /usr/include/pci/config.h ]|| deplist+=("$p_pciutils")
		[ -e /usr/include/pciaccess.h ]|| deplist+=("$p_libpciaccess")
#		[ -e /usr/include/xorg/xorg-server.h ]|| deplist+=("$p_xorgdev")
	fi
	if [ $dist_type = 0 ]; then
		[ -x /usr/bin/gksu ]|| deplist+=("$p_gksu")
	fi
	w_width='400'
#	if [[ $(echo "${deplist[*]}") != '' ]] ; then
	if [ "${#deplist[*]}" -gt 0 ] ; then
		zenity --question --width=$w_width --text="$v Required dependencies are not met.\n You need to install them now ?$end" --ok-label="Install"
		if [ $? = 0 ]; then
			( 
			xterm $xt_options -e "$PKG_INSTALLER $pkg_opts$pkg_cmd ${deplist[*]}; printf \"$esc_message\"; sleep $xt_delay"
			) | zenity --progress --pulsate --auto-close --width=$w_width --text="Installing missing dependencies..."
		else
			exit 0
		fi
	fi
}
connection_control(){
	cnx=$(ping -c2 nvidia.com)
	cnx=$?
	(	[[ $(ping -c2 nvidia.com) ]]|| (zenity --width=300 --error --text="$v$msg_00_11$end")
	) | zenity --width=450 --title="Zenvidia" --progress --pulsate --auto-close \
	--text="$v$msg_00_10...$end" 
	if [ $cnx = 0 ]; then cnx_msg="$ansOK"
	else cnx_msg=$ansNA
	fi
}

## gcc compatibility control
compil_vars(){
#	if [ -s $tool_dir/bin/'nvidia-installer' ]; then
	if [[ -s $d_nv_installer ]]; then
		NV_bin_ver=$($d_nv_installer -v | grep "nvidia-installer"|awk '{print $3}')
	else
		NV_bin_ver='none'
	fi
	if [[ $(gcc --version | grep "gcc") ]]; then
		GCC=$(gcc --version | grep "gcc" | sed -n "s/^.*) //p"| awk '{print $1}')
	else
		GCC='none'
	fi
	KERNEL=$(uname -r)
	OLD_KERNEL=$(ls -1 /lib/modules | sed -n '/'$KERNEL'/{g;1!p};h')
	# xterm default vars and messages.
	primary_dsp=$(xrandr --current| grep -w "connected"| grep primary)
	term_x_dsp=$(printf "$primary_dsp"| grep -o "[0-9]\{3,4\}[x]"|sed -n "s/x//p")
	[ $xt_hold = 0 ]|| x_hold=' -hold'
	if [ $xt_hold = 1 ]; then
		esc_message="$xB\n# Close xterm window to escape.\n$xN"
		x_hold=' -hold'
	else
		esc_message="$xB\n# Terminal will auto-close in $xt_delay seconds.\n$xN"
	fi
	xt_options=$xt_colors''$x_hold' -fn 8x13 -geometry 80x24+'$[ (($term_x_dsp-660)/2)$dock ]'+0'
}
# define installed driver version, if any
version_id(){
	version=$(cat $nvdir/version.txt)
	mod_version=$($d_modinfo -F version nvidia)
	ver_txt=$(printf "$version"|sed -n "s/\.//p")
	ver_mod=$(printf "$mod_version"|sed -n "s/\.//p")
	if [[ $version ]]; then
		if [[ $mod_version ]]; then
			if [[ $ver_mod -ge $ver_txt ]]; then
				version=$mod_version
			fi
		fi
	else
		version="undefined"
	fi			
}

nv_gen_keys(){ # <<< NOT USED
	# make keys config
	append_conf="[ req ]
default_bits = 4096
distinguished_name = req_distinguished_name
prompt = no
string_mask = utf8only
x509_extensions = myexts

[ req_distinguished_name ]
O = $(uname -n).local
CN = $(uname -n).local signing key
emailAddress = root@$(uname -n).local

[ myexts ]
basicConstraints=critical,CA:FALSE
keyUsage=digitalSignature
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid"
	printf "$append_conf\n" > $nvdir/nv_ssl.conf
	# create keys
	/usr/bin/openssl req -x509 -new -nodes -utf8 -sha256 -days 36500 -batch \
	-config $nvdir/nv_ssl.conf -outform DER -out $nvdir/public_key.der \
	-out $nvdir/public_key.x509 -keyout $nvdir/private_key.priv
	if [ -e $nvdir/public_key.der ]; then
#		rm -f $nvdir/nv_ssl.conf
		# secure them
		chmod 600 $nvdir/public_key.der $nvdir/public_key.x509 $nvdir/private_key.priv
		# enroll keys in DER for UEFI
		mokutil --import $nvdir/public_key.der
		mv -f -t $kernel_src $nvdir/public_key.x509 $nvdir/private_key.priv
	fi
}

## VIRTUALIZER AND TOOLS BUILDING PART
## REMOVED ##

dkms_rebuild(){
	force=1
	(	kernel_path=/lib/modules/$KERNEL/extra
		force_opt='--force'
		operande="Driver rebuilding"
		nv_build_dkms
	) | zenity --width=450 --title="Zenvidia" --text="Force dkms rebuild " --progress --pulsate --auto-close
	base_menu
}
zenvidia_update(){
	echo "# GIT : Zenvidia Update "
	if [ $(ls $local_src| grep -c "zenvidia") -gt 0 ]; then
		git_repo="$local_src/zenvidia"
	else
		git_repo=$(find -P $home -maxdepth 3 -mount -wholename "*/zenvidia")
	fi
	( if [ -d $git_repo ]; then
		cd $git_repo
		echo "# GIT : Updating Zenvidia..."
		git fetch --dry-run &>$git_tmp
		fetch=$(cat $git_tmp|grep -c "master")
		cmd_line="
		if [ $fetch -eq 1 ]; then
			printf \"$xB# Proceeding to script update:$xN\n\n\"
			git pull
			make update; printf \"$esc_message\"; sleep $xt_delay
		else
			printf \"$xB# GIT : Zenvidia already up-to-date. Skipping...$xN\n\n\"
			printf \"$esc_message\"; sleep $xt_delay
		fi"
		xterm $xt_options -title Zenvidia_update -e "$cmd_line"
	else
		cd $local_src
		echo "# GIT : Cloning Zenvidia..."; sleep 3
		cmd_line="printf \"$xB# Cloning Zenvidia GIT repo:$xN\n\n\"
		git clone $zenvidia_git; cd zenvidia
		chmod a+w .git/object/pack
		printf \"\n$xB# Proceeding to script update:$xN\n\n\" 
		make update; printf \"$esc_message\"
		sleep $xt_delay"
		xterm $xt_options -title Zenvidia_update -e "$cmd_line"
	fi
	) | zenity --width=450 --title="Zenvidia" --text="Zenvidia Update check..." --progress --pulsate --auto-close
}
## CONFIGURATION
## VIRTUALIZER CONFIGURATION PART
## REMOVED ##

xorg_conf(){
	sec_files(){
		if [[ $ELF_TYPE == 64 ]]; then
			ELF=$ELF_64
		else
			ELF=''
		fi
		file_headers="## xorg conf originaly created by $new_version nvidia installer.
## Edited automaticaly by Zenvidia > $(date +%D-%T)"
		if [ $chk_version -lt 430 ]; then
			file_core_0="Section \"Files\"
	ModulePath \"$croot/nvidia/xorg/modules\"
	ModulePath \"/usr/$master$ELF/xorg/modules\"
EndSection"
		fi
		printf "$file_headers\n\n
$file_core_0
## ABI config
\n" > xorg.conf.nvidia.$new_version
	}
	sec_module(){
		if [ $chk_version -lt 430 ]; then
			file_core_1="	Disable	\"glamoregl\"
	Load	\"modesetting\""
		else
			file_core_1="	Load	\"modesetting\""
		fi
		printf "Section \"Module\"
	$file_core_1
EndSection
" >> xorg.conf.nvidia.$new_version
	}
	sec_device(){
		for e in $pci_dev_nb; do
			if [ $install_type = 1 ]&&[ $use_bumblebee = 0 ]; then
				pci_slot='bus_id:0:0'
			else
				pci_slot=$(printf "${slot[$e]}"| sed -n "s/^0//;s/:0/:/;s/\./:/p")
			fi
			if [[ $(printf "${dev[$e]}"|grep "GeForce\|Quadro\|NVS\|Tesla\|GRID") != '' ]]; then
			printf "Section \"Device\"
	Identifier	\"Device${dev_n[$e]}\"
	Driver		\"nvidia\"
	VendorName	\"${vnd[$e]}\"
	BusID		\"PCI:$pci_slot\"
\n" >> xorg.conf.nvidia.$new_version
			fi
		done
	}
	sec_option_df(){
		printf "\tOption	\"NoLogo\" \"true\"
	Option	\"DPMS\"
	Option	\"UseEDID\" \"true\"
	Option	\"ProbeAllGpus\" \"false\"
#	Option	\"UseDisplayDevice\" \"none\"
#	Option	\"ConnectedMonitor\" \"DFP\"
#	Option	\"DynamicTwinView\" \"false\"
#	Option	\"AddARGBGLXVisuals\"
	Option	\"SLI\" \"Off\"
#	Option	\"MultiGPU\" \"Off\"
	Option	\"BaseMosaic\" \"off\"
#	Option	\"UseEdidDpi\" \"false\"
	Option	\"Coolbits\" \"8\"
#	Option	\"AllowGLXWithComposite\" \"true\"
#	Option	\"TripleBuffer\" \"true\"
	Option	\"Stereo\" \"0\"
	Option	\"RenderAccel\" \"true\"
	Option	\"DPI\" \"96 x 96\"
EndSection
\n" >> xorg.conf.nvidia.$new_version
	}
	sec_option_op(){
		printf "\tOption	\"NoLogo\" \"true\"
	Option	\"AllowEmptyInitialConfiguration\"
#	Option	\"UseEDID\" \"false\"
#	Option	\"ProbeAllGpus\" \"false\"
#	Option	\"UseDisplayDevice\" \"none\"
#	Option	\"ConnectedMonitor\" \"DFP\"
#	Option	\"DynamicTwinView\" \"false\"
#	Option	\"AddARGBGLXVisuals\"
	Option	\"SLI\" \"Off\"
#	Option	\"MultiGPU\" \"Off\"
#	Option	\"BaseMosaic\" \"off\"
#	Option	\"UseEdidDpi\" \"false\"
#	Option	\"Coolbits\" \"8\"
#	Option	\"AllowGLXWithComposite\" \"true\"
	Option	\"TripleBuffer\" \"true\"
#	Option	\"Stereo\" \"0\"
#	Option	\"RenderAccel\" \"true\"
	Option	\"DPI\" \"96 x 96\"
EndSection
\n" >> xorg.conf.nvidia.$new_version
	}
	sec_layout(){
		printf "Section \"ServerLayout\"
	Identifier	\"Layout0\"
#	Screen	0	\"Screen0\" 0 0
	Option	\"AutoAddDevices\" \"false\"
	Option	\"AutoAddGPU\" \"false\"
EndSection
X
Section \"ServerFlags\"
	Option	\"Xinerama\" \"0\"
	# allows the server to start up even if the mouse does not work
	AllowMouseOpenFail
EndSection
\n" >> xorg.conf.nvidia.$new_version
	}
	screen_opt(){
		printf "Option	\"Stereo\" \"0\"
	Option	\"nvidiaXineramaInfoOrder\" \"DFP-${dev_n[0]}\"
#	Option	\"metamodes\" \"DVI-I-1: nvidia-auto-select +0+0, HDMI-0: nvidia-auto-select +1920+1080\"
#	Option	\"SLI\" \"Off\"
#	Option	\"MultiGPU\" \"Off\"
#	Option	\"BaseMosaic\" \"off\"
#	Option	\"AddARGBGLXVisuals\" \"true\"

#	Option	\"Coolbits\" \"8\"
#	Option	\"AllowGLXWithComposite\" \"true\"
#	Option	\"TripleBuffer\" \"true\"
#	Option	\"RenderAccel\" \"true\"
\n" >> xorg.conf.nvidia.$new_version
	}
	screen_dsp(){
		printf "\tSubSection \"Display\"
	Depth	24
EndSubSection\n" >> xorg.conf.nvidia.$new_version
	}
	sec_screen(){
		printf "Section \"Screen\"
    Identifier	\"Screen${dev_n[0]}\"
    Device		\"Device${dev_n[0]}\"
    Monitor		\"Monitor${dev_n[0]}\"
    DefaultDepth	24
\n" >> xorg.conf.nvidia.$new_version
    	screen_opt
    	screen_dsp
		printf "EndSection
\n" >> xorg.conf.nvidia.$new_version
	}
## xorg conf to file
	if [ $install_type = 1 ]; then
		if [ $use_bumblebee = 1 ]; then
			x_conf_dir=$tool_dir/etc/bumblebee
			cd $x_conf_dir
			sec_files
			sec_device
			sec_option_op
		elif [ $use_bumblebee = 0 ]; then
			x_conf_dir=/etc/nvidia-prime
			[[ -d $x_conf_dir ]]|| mkdir -p $x_conf_dir
			if [[ -f $x_conf_dir/xorg.nvidia.conf ]]; then
				if [ $(file -p /etc/X11/xorg.conf| grep -c "xorg.nvidia.conf") -eq 0 ]; then
#					mv -f $x_conf_dir/xorg.nvidia.conf $x_conf_dir/xorg.nvidia.conf.bak
					ln -sf $x_conf_dir/xorg.nvidia.conf /etc/X11/xorg.conf
				fi
			fi
			abi_crtl
#			cd $x_conf_dir
#			sec_files
#			sec_module
#			sec_device
#			sec_option_op
		fi
	else
		x_conf_dir=/etc/X11
		cd $x_conf_dir
		sec_files
		sec_device
		sec_option_df
	fi
	if [ $install_type = 1 ];then
		if [ $use_bumblebee = 1 ]; then
			ln -sf ./xorg.conf.nvidia.$new_version ./xorg.conf.nvidia
#		elif [ $use_bumblebee = 0 ]; then
#			cp -f ./xorg.conf.nvidia.$new_version ./xorg.nvidia.conf
		fi
	else
		if [[ -s /etc/X11/xorg.conf ]]; then
			if [ $(diff -q ./xorg.conf.nvidia.$new_version ./xorg.conf  | grep -c ".*") -gt 0 ]; then
				if [ ! -e ./xorg.conf.nvidia ]; then
					if [ ./xorg.conf.nvidia.$old_version ]; then
						mv -f ./xorg.conf.nvidia.$old_version ./xorg.conf.nvidia
					fi
				fi
				diff -u ./xorg.conf.nvidia.$new_version ./xorg.conf.nvidia &>/tmp/nv_patch.diff
				patch -p0 -i /tmp/nv_patch.diff ./xorg.conf.nvidia.$new_version
				cp -f ./xorg.conf.nvidia.$new_version ./xorg.conf.nvidia
				ln -sf ./xorg.conf.nvidia ./xorg.conf
			fi
		else
			mv -f ./xorg.conf.nvidia.$new_version ./xorg.conf.nvidia
			ln -sf ./xorg.conf.nvidia ./xorg.conf
		fi
	fi
}
abi_crtl(){
## enable xorg ABI23 behaviour to fix vsync and render for prime setting. 
## TODO ? sudo rmmod nvidia-drm; sudo modprobe nvidia-drm modeset=1
	if [[ -s /var/log/Xorg.0.log ]]; then
		abi_ver=$(cat /var/log/Xorg.0.log| sed -En "s|^.*ABI.*Driver.* ([0-9]{2})\..*$|\1|p"| uniq)
		if [[ $abi_ver && $abi_ver -ge 23 ]]; then
			if [ $(cat $install_dir/xorg.nvidia.conf| grep -c "IgnoreABI" ) -eq 0 ]; then
				server_flag="Section \"ServerFlags\"\n\tOption\t\"IgnoreABI\" \"1\"\nEndSection"
				sed -Eni -e "s|^(## ABI config)$|\1\n$server_flag|g;p" $install_dir/xorg.nvidia.conf
			fi
		fi
	fi
}
if_blacklist(){
	grub_cfg=$(find /boot -wholename "*/grub.cfg")
	grub_def=/etc/default/grub
	grub_key='GRUB_CMDLINE_LINUX'
	if [ $(cat $grub_def| egrep -c "^$grub_key.*blacklist=nouveau.*$") -eq 0 ]; then
		blacklist='nouveau.modeset=0 rd.driver.blacklist=nouveau'
		## modset var is coming from nvidia-prime config sets or other distro config systems.
		## First test if prime tools has already set it, then process.
		if [ $modeset = 0 ]; then
			modset='nvidia-drm.modeset=0 '$blacklist
		else
			modset=$blacklist
		fi
		## add nouveau blacklist to modeprobe.d configs list.
		if ! [[ -s /etc/modprobe.d/blacklist-nouveau.conf ]]; then
			echo "blacklist nouveau" > /etc/modprobe.d/blacklist-nouveau.conf
			echo "# Updated blacklist for nouveau driver..."; echo "$n"; n=$[ $n+4 ]; sleep 2
		fi
		## replace default env grub with new vars and create a new grub.cfg.
		sed -Eni "s|^($grub_key)=\"(.*)\"$|\1=\"$modset \2\"|g;p" $grub_def
		grub2-mkconfig -o $grub_cfg
		echo "# Updated GRUB conf for nouveau driver blacklisting."; echo "$n"; n=$[ $n+4 ]; sleep 2
	fi
}
service_check(){
	if [ $sys_old = 1 ]; then
		if [ $dis_service ]; then
			v_pid=$($d_sys_c $dis_service status| grep "PID"| \
			perl -p -e "s|^.*: +([0-9]+).*$|\1|")
			if [ $v_pid ]; then
				$d_sys_c $dis_service stop
				$d_sys_c $dis_service disable
			fi
		fi
		$d_sys_c $sys_service restart
	else
		if [ $dis_service ]; then
			v_pid=$($d_sys_c status $dis_service.$sys_c_ext| grep "PID"| \
			perl -p -e "s|^.*: +([0-9]+).*$|\1|")
			if [ $v_pid ]; then
				$d_sys_c stop $dis_service$sys_c_ext
				$d_sys_c disable $dis_service$sys_c_ext
			fi
		fi
		$d_sys_c restart $sys_service$sys_c_ext
	fi
}
## AFTER INSTALL
post_install(){
	echo "# Post install routines..."; echo "$n"; n=$[ $n+4 ]
	if [ -d $croot_32 ]||[ -d $croot_64 ]; then
		# libnvidia-wfb.so is broken with old version, need to be replace with xorg server libwfb.so. If exist in nvidia's dirs. 
		if [ -e $xorg_dir/modules/libwfb.so ]; then
			## 418 and above don't need nvidia libwfb.so to be replace anymore
			if [ $wfb_rep -gt 0 ]; then
				mv -f $xorg_dir/modules/libwfb.so $xorg_dir/modules/libwfb.so.orig
				ln -sf /usr/$master$ELF_64/xorg/modules/libwfb.so $xorg_dir/modules/libwfb.so
			fi
		fi
		[ -d $croot/nvidia.$new_version ]|| mv -f $croot/$predifined_dir $croot/nvidia.$new_version
		cd $croot
		ln -sf -T ./nvidia.$new_version ./nvidia		
		if [ $install_type = 1 ]; then
			xorg_conf; echo "$n"; n=$[ $n+2 ]
			backup_driver; echo "$n"; n=$[ $n+4 ]
			# bumblebee
			if [ $use_bumblebee = 1 ]; then
				modeset=1 # unused
				echo "# Optimus : Configure and load/reload Bumblebee..."; sleep 1
				echo "$n"; n=$[ $n+4 ]
				local_src_ctrl; echo "$n"; n=$[ $n+4 ]
				bumblebee_conf; echo "$n"; n=$[ $n+2 ]
				# update primus libGL to new driver libGL
				primus_update
				echo "# Optimus : Start or Restart Optimus service..."; sleep 1
				echo "$n"; n=$[ $n+4 ]
				sys_service='bumblebeed'
				dis_service='nvidia-prime'
				service_check
			## prime
			else
				modeset=0 # unused
				echo "# Optimus : Configure and load/reload Prime..."; sleep 1
				echo "$n"; n=$[ $n+4 ]
				prime_src_ctrl; echo "$n"; n=$[ $n+4 ]
				echo "# Optimus : Start or Restart Prime service..."; sleep 1
				echo "$n"; n=$[ $n+4 ]
				sys_service='nvidia-prime'
				dis_service='bumblebeed'
				service_check
#				/usr/sbin/nvidia-prime-select nvidia
				sleep 1
				/usr/sbin/nvidia-prime-select nvidia
				if [ ! -f /etc/nvidia-prime/library.conf ]; then
					touch /etc/nvidia-prime/library.conf
				fi
				unset elf_lib_list
				elf_lib_list=("$ELF_32,32" "$ELF_64,64")
				for nv_lib in "${elf_lib_list[@]}"; do
					_elf=$(printf "$nv_lib"|cut -d, -f2)
					_lib=$(printf "$nv_lib"|cut -d, -f1)
					if [ -d $croot_all/$master$_lib ]; then
						if [ $(cat /etc/nvidia-prime/library.conf| grep -c .) -eq 0 ]; then
							printf "nv_drv_$_elf=\'$croot_all/$master$_lib\'" \
							>> /etc/nvidia-prime/library.conf
						else
							perl -ni -pe "s|nv_drv_$_elf=.*$|nv_drv_$_elf='$croot_all/$master$_lib'|i" /etc/nvidia-prime/library.conf
						fi
					else
						zenity --width=450 --title="Zenvidia" --error --icon-name=xkill \
						--text="$vB Could not find$j $croot_all/$master$_lib$end.\nAbort.$end."
						if [ $? = 1 ]; then base_menu; else exit 0; fi
					fi
				done
				if [ $(cat /etc/nvidia-prime/library.conf| grep -c .) -eq 0 ]; then
#					printf "nv_xorg_path=\'$croot_all/nvidia/xorg\'\nrc_dir=\'/etc/rc.d\'" \
					printf "nv_xorg_path=\'$croot_all/nvidia/xorg\'" \
					>> /etc/nvidia-prime/library.conf
				else
					perl -ni -pe "s|nv_xorg_path=.*$|nv_xorg_path='$croot_all/xorg'|i" \
					/etc/nvidia-prime/library.conf
# 					XXX Removed from nvidia-prime-select
#					perl -ni -pe "s|rc_dir=.*$|rc_dir='/etc/rc.d'|i" \
#					/etc/nvidia-prime/library.conf
				fi
				prime_msg="$prime_msg_01\n$prime_msg_03"
				prime_setup
			fi		
		else # [ $optimus = 0 ]
			xorg_conf
			backup_driver
			modeset=1 # unused
			if [ ! -s /etc/ld.so.conf.d/nvidia-$master$ELF_TYPE ]; then
				unset elf_lib_list
				elf_lib_list=("$ELF_64" "$ELF_32")
				for nv_lib in "${elf_lib_list[@]}"; do
					ld_conf=$croot_all/$master$nv_lib
					[[ $nv_lib == 64 ]]|| nv_lib=32
					nv_lib_file='/etc/ld.so.conf.d/nvidia-'$master$nv_lib'.conf'
					printf "$ld_conf" > $nv_lib_file
				done
			fi
			ldconfig
		fi
		cd $nvdir
	fi
	if [ -e $nvlog/install.log ]; then cp -f $nvlog/install.log $nvlog/install-$new_version.log; fi
	echo "# Fixing broken libs if needed..."; echo "$n"; n=$[ $n+4 ]
	elf_lib=( "$master$ELF_32" "$master$ELF_64" )
	cd $install_dir
	for lib_X in "${elf_lib[@]}"; do
		for old_lib in {fbc,cfg,gtk2,gtk3}; do
			if [ -s $install_dir/$lib_X/libnvidia-$old_lib.so.$old_version ]; then
				rm -f $install_dir/$lib_X/libnvidia-$old_lib.so.$old_version
			fi
		done
	done
	cd $nvtmp
	## fix gui libraries install if broken
	extracted=NVIDIA-Linux-$ARCH-$new_version
	if [ -d $extracted ]; then
		## fix lib32 prefix libs 
		if [ -d $nvtmp/$extracted/32 ]; then
			[ -s $install_dir/$master$ELF_32/libnvidia-fbc.so.$new_version ]|| \
			( cp -f $extracted/libnvidia-fbc.so.$new_version $install_dir/$master$ELF_32/
			cd $install_dir/$master$ELF_32/
			ln -sf libnvidia-fbc.so.$new_version libnvidia-fbc.so.1
			ln -sf libnvidia-fbc.so.1 libnvidia-fbc.so
			cd $nvtmp
			)
		fi
		## fix lib64 prefix libs
		for links in {fbc,cfg,gtk2,gtk3}; do
			[ -s $install_dir/$master$ELF_64/libnvidia-$links.so.$new_version ]|| \
			( cp -f $extracted/libnvidia-$links.so.$new_version $install_dir/$master$ELF_64/
			cd $install_dir/$master$ELF_64/
			ln -sf libnvidia-$links.so.$new_version libnvidia-$links.so.1
			ln -sf libnvidia-$links.so.1 libnvidia-$links.so
			cd $nvtmp )
		done
		## it appears that gtk symlinks are not always correctly linked at install,
		## fix them if broken
		for links in {gtk2,gtk3}; do
			[ -h $install_dir/$master$ELF_64/libnvidia-$links.so.1 ]|| \
			( cd $install_dir/$master$ELF_64/
			ln -sf libnvidia-$links.so.$new_version libnvidia-$links.so.1
			ln -sf libnvidia-$links.so.1 libnvidia-$links.so
			cd $nvtmp )
		done
	fi
	## symlink libvdpau_nvidia to system
	for lib_V in "${elf_lib[@]}"; do
		link_v=$(file -p /usr/$lib_V/vdpau/libvdpau_nvidia.so.1| grep -c "nvidia.$new_version")
		if [ $link_v -eq 0 ]; then
			[ -d /usr/$lib_V/vdpau ]|| mkdir -p /usr/$lib_V/vdpau
			ln -sf $croot_all/$lib_V/vdpau/libvdpau_nvidia.so.$new_version /usr/$lib_V/vdpau/libvdpau_nvidia.so.1 
		fi
	done
	## link now all new libraries
	ldconfig	
	echo "$n"; n=$[ $n+4 ]
	if [ ! -h /usr/share/nvidia ]; then
		rm -f /usr/share/nvidia
		ln -sf -T $install_dir/share/nvidia /usr/share/nvidia
	fi
	## if driver version greater than 430.xx, backup xorg modules content to defautl libs dirs. Just in case.
	if [ $chk_version -ge 430 ]; then
		if [ -s $xorg_def/modules/extensions/libglxserver_nvidia.so ]; then
			mkdir -p $croot_all/xorg/modules/{extensions,drivers}
			cp -rf $xorg_def/modules/extensions/libglxserver_* $croot_all/xorg/modules/extensions/
			cp -f $xorg_def/modules/drivers/nvidia_drv.so $croot_all/xorg/modules/drivers/
		fi
		## TODO add restore tar filter also.
	fi
	if_blacklist
#	echo "# Blacklisting nouveau driver in grub if needed..."; echo "$n"; n=$[ $n+4 ]; sleep 2
}

### INSTALL
old_kernel(){
	nv_list=( nvidia nvidia-uvm nvidia-modeset nvidia-drm )
	for nvname in "$nv_list"; do
		old_driver=$($d_modinfo -F version /lib/modules/$OLD_KERNEL/extra/$nvname.ko)
		if [ -s /lib/modules/$OLD_KERNEL/extra/$nvname.ko ]; then
			[ -s $croot/nvidia.$old_driver/$OLD_KERNEL/$nvname.ko ]|| \
			cp /lib/modules/$OLD_KERNEL/extra/$nvname.ko \
			$croot/$nvname.$old_driver/$OLD_KERNEL/
		fi
	done
}
clean_previous(){
		echo "# Backing up old kernel driver..."
		if [ -s /lib/modules/$OLD_KERNEL/extra/nvidia.ko ]; then
			old_kernel
		fi
}
nv_modules_set(){
	## nvidia_installer can't unload nvidia_drm.
	## nvidia-installer use --no-drm and --no-uvm options in the command line to not managed uvm and/or
	## drm modules. However, it could be messy to use those options when compling drivers modules, thus,
	## script will prefer to blacklist unused modules instead of not compiling them and allow thier usage
	## in a possible future.
	## PC has to be reboot after modules set.
	_insert_type=1
	_help_tip="$v - Unified Memory Module ($j nvidia-uvm $end)
   is required for CUDA driver and application.
 - Prime Sync DRM Module ($j nvidia-drm $end)
   is required for Optimus PRIME modesetting environment.$end
If you do not have or intend to use CUDA service and/or Optimus PRIME,
it is safe to not use/build them.\n"
	if ! [ $no_warn ]; then no_warn=0; _insert_type=0; fi
	## get values from config file.
	if [ $hlp_txt = 1 ]; then _tip=$_help_tip; else _tip=''; fi
	if [ $use_uvm -gt 0 ]; then UVM='TRUE'; else UVM='FALSE'; fi
	if [ $use_drm -gt 0 ]; then DRM='TRUE'; else DRM='FALSE'; fi
	modules_msg="$vB\This is the first time you launch this options sets.\n
With the next window you can select the nvidia's drivers type you want/need
to use and will set the basic configuration file for future builds.
$_help_tip$end"
	# warn about first use.
	if [ $no_warn = 0 ]; then
		zenity --question --title="Zenvidia modules set" --icon-name=dialog-warning --text="$modules_msg" \
		--no-wrap --cancel-label="I got it, but don't show me this message again" --ok-label="I got it"
		no_warn=$?
		if [ $_insert_type = 1 ]; then
			sed -Eni "s/^(no_warn)=[0-9]$/\1=$no_warn/g;p" $basic_conf
		else
			echo -e "# display first time modules build messsage (0) or not (1)
no_warn=$no_warn" >> $basic_conf
		fi
	fi
	_title="Modules build selection"
	_text="$rBB\Nvidia Optional Modules$end 
$vB\By default Zenvidia will only build the main Nvidia driver.
You can select here the optional driver as you need.
$_tip
Check the appropriate boxes in list below to build optional drivers.$end
$v(Choice will be saved in default conf file)$end"
	driver_var=$(zenity --width=500 --list --title="$_title" --text="$_text" --column="check" --column="hide" \
	--column="driver" --checklist --multiple --print-column=2 --hide-column=2 --separator=' ' --hide-header \
	$UVM "use_uvm" "Unified Memory Module (nvidia-uvm)" $DRM "use_drm" "Optimus Prime Sync DRM Module (nvidia-drm)")
	for mod in "_uvm" "_drm"; do
		class='use'$mod
		if [ $(printf "${driver_var[@]}"| grep -c "$class") -gt 0 ]; then
			used_val=1
			rep=''
		else
			used_val=0
			rep='blacklist nvidia'$mod
		fi
		sed -Eni "s/^($class)=[0-9]$/\1=$used_val/g;p" $basic_conf
		export $class=$used_val
		if [ $(cat /etc/modprobe.d/blacklist.conf| grep -c "$mod") -eq 0 ]; then
			if [ $used_val = 0 ]; then echo -e "blacklist nvidia$mod" >> /etc/modprobe.d/blacklist.conf; fi
		else
			sed -Eni "s/^blacklist nvidia$mod$/$rep/g;p" /etc/modprobe.d/blacklist.conf
		fi
		## removed blanck lines from file.
		sed -in "/^[[:space:]]*$/d;s/^\ //g" /etc/modprobe.d/blacklist.conf
	done
#	exit 0
}
nv_cmd_try_legacy_first(){
	## XXX Whatever module loaded, nvidia_installer refuse constently to compil drivers.
	## This is a stupid nvidia's developper issue that wont be fix ever (they apparently
	## don't know that a driver can be compil when same driver is loaded O_o !).
	## Thus, zenvidia has stopped to use it since v1.0 and above.
	## This function has been kept for legacy and maybe.... fix (?).
	if [ $opts_setted = 0 ]; then nv_build_options; fi
	if [ ! $upgrade_other = '' ]; then 
		new_version=$version
		install_bin='./nvidia-installer'
	fi
	cd $nvtmp/NVIDIA-Linux-$ARCH-$new_version
	echo "# Trying compil from LEGACY BUILD directory..."; sleep 1
	[ $use_dkms = 0 ]|| dkms="--dkms"
	xterm $xt_options -title Zenvidia_Nvidia_Installer -e "
$install_bin -s -z $no_net --no-x-check $no_uvm $no_uvm $dkms -K -b $no_check \
--skip-module-unload --no-distro-scripts \
--kernel-source-path=$kernel_src --kernel-install-path=$kernel_path \
$SIGN_S $SElinux $temp --log-file-name=$driver_logfile
depmod $KERNEL -a
printf \"$esc_message\"
sleep $xt_delay"
}
cc_options(){
	# test driver code compilator version __GNUC__, __GNUC_MINOR__
	if [ $gcc_mismatch = 1 ]; then ignore_mismatch="IGNORE_CC_MISMATCH=1"; else ignore_mismatch=''; fi
	export IGNORE_CC_MISMATCH=$gcc_mismatch
#	if [ $mod_list = 1 ]; then modules_list=  ; else modules_list=''; fi
}
nv_cmd_install_driver(){
	# if this is a second attempt of installing drivers, test first the actual mod version
	# then send warn if it is already the updated one.
	if [[ $($d_modinfo -F version nvidia) != $new_version ]]; then
		[ $use_dkms = 0 ]|| nv_cmd_dkms_conf
		upgrade_other=0
		if [[ $($d_modinfo -F version nvidia) != $new_version ]]; then
			[ -d /usr/src/nvidia-$new_version ]||mkdir -p /usr/src/nvidia-$new_version
			cp -Rf $nvtmp/NVIDIA-Linux-$ARCH-$new_version/kernel/* /usr/src/nvidia-$new_version
			if [ $use_dkms = 1 ]; then
				if [ -d $nvtmp/NVIDIA-Linux-$ARCH-$new_version/kernel ]; then
					if [[ $(cat /usr/src/nvidia-$new_version/dkms.conf|grep -o "$new_version") == '' ]]; then
						nv_cmd_dkms_conf
					fi
					if [ ! $old_version ]; then $old_version=$version; fi
					version=$new_version
					REPORT='DKMS '
					# Compil and install DKMS modules				
					nv_build_dkms
					# In case of modules compil errors, force it from source
					if [[ $($d_modinfo -F version nvidia) != $new_version ]]; then
						echo "# DKMS compilation ERROR !!"; sleep 2 
						echo "# Force MODULES compilation from source..."; sleep 1
						nv_cmd_make_src
					fi
				fi
			fi
			if [ $use_dkms = 0 ]; then
				echo "# Nvidia MODULES compilation..."; sleep 1 
				REPORT='SOURCE '
				nv_cmd_make_src
			fi
		fi
		if [ ! -f $kernel_path/nvidia.ko ]&&[[ ! $($d_modinfo -F version nvidia) ]]; then
			zenity --width=450 --title="Zenvidia" --error --icon-name=xkill \
			--text="$j INSTALL ABORT ABNORMALY, check $logfile$end."
			exit 0
		fi
	else
		# TODO > if driver auto remove on re-install, make a driver and dkms dir backup,
		# then, restore them at the end.
#		if [ ]
		echo "# DRIVER ALREADY INSTALL, SKIPING THIS STEP."; sleep 2
	fi
#	if [ $driver_level -ge 355 ]; then
#		$nvtmp/NVIDIA-Linux-$ARCH-$new_version/nvidia-modprobe -u -m
#	else
#		$nvtmp/NVIDIA-Linux-$ARCH-$new_version/nvidia-modprobe -u
#	fi
}
nv_cmd_update(){
	driver_logfile=$nvlog/$version-$KERNEL.log
	if [ $use_dkms = 1 ]; then
		if [[ ! $(cat /usr/src/nvidia-$version/dkms.conf|grep -o "$version") ]]; then
			nv_cmd_dkms_conf
			cp -f $nvtmp/NVIDIA-Linux-$ARCH-$version/kernel/dkms.conf /usr/src/nvidia-$version/
		fi
	fi
	if [[ $upgrade_other = 1 || $($d_modinfo -F version nvidia) != $version ]]; then
		if [ -s $driver_logfile ] && [ $(cat $driver_logfile | grep "ERROR"| grep -c "nvidia-drm") -gt 0 ]; then
			printf "$vB$m_04_02$end$rB $val_04_A$end> $m_04_02b\n" >> $reportlog
		fi
		if [ $use_dkms = 1 ]; then
			force=0
			nv_build_dkms
			if [[ $($d_modinfo -F version nvidia) != $version || \
			$($d_modinfo -k $KERNEL -F version nvidia) != $version ]]; then
				echo "# DKMS compilation ERROR !!"; sleep 2 
				echo "# Force MODULES compilation from source..."; sleep 1
				nv_cmd_make_src
			fi
		else
			if [ $use_dkms = 0 ]; then
				echo "# Nvidia MODULES compilation..."; sleep 1 
				nv_cmd_make_src
			fi
		fi
	fi
}
nv_build_dkms(){
	## remove previous version if any before installing new one.
	if [[ $old_version && $old_version != $version ]]; then
		remove_dkms="/usr/sbin/dkms remove -m nvidia/$old_version --all"
		remove_message="printf \"$xB# Removing previous $old_version DKMS modules from DKMS directory.\n$xN\""
	fi
	if [ ! -d /var/lib/dkms/nvidia/$version ]; then
		echo "# Add DKMS modules to DKMS directory..."; sleep 1
		add_message="printf \"$xB# Add DKMS modules to DKMS directory.\n$xN\""
		add_dkms="/usr/sbin/dkms add -m nvidia/$version -k $KERNEL"
	fi	
	echo "# Build & install DKMS modules..."; sleep 1
	xterm $xt_options -title Zenvidia_dkms_build -e "
printf \"$xB# Installing DKMS modules:\n\n$xN\"
$remove_dkms
$remove_message
$add_message
$add_dkms
printf \"$xB# Build & Install $version DKMS modules:\n\n$xN\"
/usr/sbin/dkms install -m nvidia/$version -k $KERNEL
printf \"$esc_message\"
sleep $xt_delay"
	sleep 1
	if [ -s /var/lib/dkms/nvidia/$version/build/make.log ]; then
		cp -f /var/lib/dkms/nvidia/$version/build/make.log dkms-$driver_logfile
	fi
	## SOLVED 05.09.19 > nutshell in modeset ko (modset in place of modeset)
	## case : dkms compilation abort or send errors.
	## if rebuild for new kernel, check installed modules vermagic for version and kernel.
	## then chek kernel version before nvidia module version.
#	compil_k=$($d_modinfo -F vermagic nvidia |grep -c "$KERNEL")
#	compil_v=$($d_modinfo -F version nvidia |grep -c "$version")
	if [[ ! -e $kernel_path\nvidia.ko || $upgrade_other = 0 ]]; then 
#		if [[ $compil_k -eq 0 || $compil_v -eq 0 ]];then
		if [ $($d_modinfo -F version $kernel_path/nvidia.ko |grep -c "$version") -eq 0 ]; then
			mod_move(){
				if [[ -s nvidia.ko ]]; then
					cp -f nvidia.ko $kernel_path
					if [[ -s nvidia-uvm.ko ]]; then cp -f nvidia-uvm.ko $kernel_path; fi
					if [[ -s uvm/nvidia-uvm.ko ]]; then cp -f uvm/nvidia-uvm.ko $kernel_path; fi
					if [[ -s nvidia-modeset.ko ]]; then cp -f nvidia-modeset.ko $kernel_path; fi
					if [[ -s nvidia-drm.ko ]]; then cp -f nvidia-drm.ko $kernel_path; fi
					[[ -s $kernel_path/nvidia.ko ]]&& /usr/sbin/depmod $KERNEL -a
					vermagic=$($d_modinfo -F vermagic $kernel_path/nvidia.ko| awk '{print $1}')
				fi
			}
			if [ -d /var/lib/dkms/nvidia/$version/$KERNEL/$ARCH/module ]; then
				cd /var/lib/dkms/nvidia/$version/$KERNEL/$ARCH/module
				mod_move
			else
				if [[ -s /var/lib/dkms/nvidia/$version/build/nvidia.ko ]]; then
					cd /var/lib/dkms/nvidia/$version/build
					mod_move
				fi
			fi
		else
			echo "# $operande done."; sleep 1
		fi
	fi
}
nv_cmd_make_src(){
#	if [[ $(printf "$new_version") != '' ]]; then version=$new_version; fi
	if [[ $new_version != '' ]]; then version=$new_version; fi
	[[ $driver_level != '' ]]|| driver_level=$(printf "$version"|cut -d. -f1)
	if [ -d /usr/src/nvidia-$version ]; then
		cd /usr/src/nvidia-$version
		cc_options
#		# test driver code compilator version __GNUC__, __GNUC_MINOR__
#		if [ $gcc_mismatch = 1 ];then
#			ignore_mismatch=" IGNORE_CC_MISMATCH=1"
#		else
#			ignore_mismatch=""
#		fi
		if [ $upgrade_other = 1 ]; then
			make_env='env KERNEL_UNAME='$KERNEL' KERNEL_SOURCES='$kernel_src' '$ignore_mismatch
		fi
		make clean; xterm $xt_options -title Compiling -e "$make_env make; printf \"$esc_message\" ; sleep $xt_delay"
		if [ $driver_level -lt 355 ]; then
			cd uvm/; make clean; xterm $x_opt -e "$make_cmd make" ; cd ../
		fi
		vermagic=$($d_modinfo -F vermagic /usr/src/nvidia-$version/nvidia.ko| awk '{print $1}')
		if [[ $vermagic == $KERNEL ]]; then
			# make modules_install will install in kernel's video driver directory.
			# check if exist first, then do it hardly if necessary.
			if [ ! -s $kernel_root/kernel/drivers/video/nvidia.ko ]; then
				if [[ -s nvidia.ko ]]; then cp -f nvidia.ko $kernel_path/; fi
				if [[ -s nvidia-uvm.ko ]]; then cp -f nvidia-uvm.ko $kernel_path/; fi
				if [[ -s uvm/nvidia-uvm.ko ]]; then cp -f uvm/nvidia-uvm.ko $kernel_path/; fi
				if [[ -s nvidia-modeset.ko ]]; then cp -f nvidia-modeset.ko $kernel_path/; fi
				if [[ -s nvidia-drm.ko ]]; then cp -f nvidia-drm.ko $kernel_path/; fi
				/usr/sbin/depmod $KERNEL -a
			fi
			/usr/sbin/ldconfig
		fi
		if [[ -s /usr/src/nvidia-$version/make.log ]]; then
			cp -f /usr/src/nvidia-$version/make.log $driver_logfile
		fi
	fi
}
nv_cmd_uninstall(){	
	## XXX FIXME Don't use nvidia_installer for driver remove. This restore grub and blacklist. XXX
	( $tool_dir/bin/nvidia-installer --uninstall -s --no-x-check $temp $logfile \
	-b --no-sigwinch-workaround --no-distro-scripts $no_check --no-nvidia-modprobe
	) | zenity --width=450 --title="Zenvidia" --progress --pulsate --auto-close \
	--text="$v$m_01_70...$end"
}
nv_cmd_dkms_conf(){
	## FIXME __EXCLUDE_MODULES et __IGNORE_CC_MISMATCH sont des option de nvidia-installer
	## Ils doivent être défini en amon des dkms_conf et build_source.
	## get gcc options
	cc_options 
	if [[ $new_version ]]; then 
		version=$new_version
	else
		version=$version
	fi
	[ -d /usr/src/nvidia-$version ]||mkdir -p /usr/src/nvidia-$version
	[[ $driver_level ]]|| driver_level=$(printf "$version"|cut -d. -f1)
	# Create DKMS conf in case of buggy one
	echo "# Create DKMS conf file..."; sleep 1 
	if [ $driver_level -le 355 ]; then
	printf "PACKAGE_NAME=\"nvidia\"
PACKAGE_VERSION=\"$version\"
AUTOINSTALL=\"yes\"

MAKE[0]=\"\'make\' -j\`nproc\` NV_EXCLUDE_BUILD_MODULES=\'\' KERNEL_UNAME=\${kernelver} modules\"
CLEAN=\"\'make\' clean\"

BUILT_MODULE_NAME[0]=\"\${PACKAGE_NAME}\"
DEST_MODULE_LOCATION[0]=\"/extra\"\n" > /usr/src/nvidia-$version/dkms.conf
		if [ $use_uvm = 1 ]; then
			printf "BUILT_MODULE_NAME[1]=\"\${PACKAGE_NAME}-uvm\"
BUILT_MODULE_LOCATION[1]=\"uvm/\"
DEST_MODULE_LOCATION[1]=\"/extra\"\n" >> /usr/src/nvidia-$version/dkms.conf
		fi
	fi
	if [ $driver_level -gt 355 ]; then
		## dkms config part.
		kms_conf+="PACKAGE_NAME=\"nvidia\"
PACKAGE_VERSION=\"$version\"
AUTOINSTALL=\"yes\"

MAKE[0]=\"'make' -j\`nproc\` NV_EXCLUDE_BUILD_MODULES='' IGNORE_CC_MISMATCH='$gcc_mismatch' KERNEL_UNAME=\${kernelver} modules\"

BUILT_MODULE_NAME[0]=\"\${PACKAGE_NAME}\"
DEST_MODULE_LOCATION[0]=\"/extra\"\n"
		n=1
		mods_list+=( "uvm" )
		mods_list+=( "modeset" )
		mods_list+=( "drm" )
		for mods in ${mods_list[@]}; do
			kms_conf+="BUILT_MODULE_NAME[$n]=\"\${PACKAGE_NAME}-$mods\"
DEST_MODULE_LOCATION[$n]=\"/extra\"\n"
			((n++))
		done
		echo -e "${kms_conf[@]}" > /usr/src/nvidia-$version/dkms.conf
	fi
}
nv_build_options(){
	if [ $opts_setted = 0 ]; then
		no_check='--no-check-for-alternate-installs'
		no_net='-N'
		chk_version=$(echo "$new_version"| cut -d'.' -f1)
		[ $use_indirect = 0 ]|| force_glvnd='--force-libglx-indirect'
		[ $use_glvnd = 0 ]|| add_glvnd='--install-libglvnd'
		## This part is options for both library and modules build/install.
		## tell script to replace nvidia's libwfb.so by system's one in post install process.
		wfb_rep=1
		if [ $chk_version -ge 390 ]; then 
			compat32='--compat32-libdir='$master$ELF_32
			compat64='--opengl-libdir='$master$ELF_64
			gl_headers='--opengl-headers'
			no_net=''
		fi
		if [ $chk_version -ge 410 ]; then 
			gl_headers=''
		fi
		if [ $chk_version -ge 430 ]; then
			xorg_dir=$xorg_def
			## 418 and above don't need nvidia libwfb.so to be replace anymore
			wfb_rep=0
		fi
	fi
}
nv_cmd_install_libs(){
## INFOS
#	-b --no-sigwinch-workaround --no-distro-scripts $no_check \	
#	--x-prefix=$xorg_dir --x-module-path=$xorg_dir/modules --opengl-prefix=$croot_all \
#	sh $driverun -a $quiet -z -Z --no-x-check --ui=none $unified \
#	--kernel-source-path=$kernel_src --kernel-install-path=$kernel_path  --no-abi-note \
#	sh $driverun -s -z -N --no-x-check \
## EXTRA INFOS
#	$nocheck --no-kernel-module --no-opengl-files --skip-module-unload \
#	--no-recursion --opengl-headers --install-libglvnd --glvnd-glx-client --force-libglx-indirect  --opengl-libdir=$master$ELF_64 \
#	--utility-prefix=$tool_dir --utility-libdir=$tool_dir/$master$ELF_64 \
	cd $nvtmp/NVIDIA-Linux-$ARCH-$new_version
	xterm $xt_options -title Zenvidia_install_libs -e "
	$install_bin -s -z $no_net --no-x-check --no-distro-scripts \
	$nocheck --no-kernel-module --skip-module-unload --no-recursion $gl_headers \
	$add_glvnd $force_glvnd --install-compat32-libs \
	--compat32-prefix=$croot_all $compat32 $compat64 \
	--x-prefix=/usr --x-library-path=$croot_all --x-module-path=$xorg_dir/modules \
	--opengl-prefix=$croot_all --utility-prefix=$tool_dir \
	$docs $profile $SIGN_S $SElinux $temp --log-file-name=$lib_logfile
	printf \"$esc_message\" ; sleep $xt_delay"
	## driver supported devices file is often not up to date,
	## control if log file message is not fatal before processing next.
	if [[ -s $lib_logfile ]]; then
		if [[ ${#COMP_I[@]} -gt 0 ]]; then
			compat_list=${COMP_I[@]}
		else
			compat_list=$(cat $nvtmp/compat.update)
		fi
		ifs=$IFS
		IFS=$(echo -en "\n\b")
		for fatal_dev in $compat_list ; do
			fatal_msg='WARNING.*'$fatal_dev'.*supported through'
			if [ $(cat $lib_logfile| grep -c "$fatal_msg") -gt 0 ]; then
				adviced_dev=$(cat $lib_logfile| sed -En "s/^.* ((.*){2,3}.xx) .*$/\1/p" )
				zenity --width=300 --title="Zenvidia" --warning \
				--text="$rB$fatal_dev GPU not supported.\nSelect $adviced_dev serie instead.$end"
				if [ -d $croot_all ]; then
					rm -f $croot_all
				fi
				base_menu
			fi 
		done
		IFS=$ifs
	else
		echo -e "Log file : $lib_logfile doesn't exist. It shouldn't happen."
		exit 0
	fi

}

## INSTALL MODULE AND LIBRARIES PROCESS
# MAIN
install_drv(){
	confirm_msg="$menu_msg\n$v$m_03_69$end $j$new_version$end $v$m_03_70$end $j$board$end."
	val_confirm="$_01"
	val_back="$MM"
	val_exit="base_menu"
	val_title="Zenvidia"
	win_confirm
	## define modules to build at compil/dkms time.
	nv_modules_set
	## extract .run package for install processes
	[ -d $nvtmp/NVIDIA-Linux-$ARCH-$new_version ]|| extract_build	
	# nvidia-installer options
	lib_logfile=$nvlog/libinstall-$new_version.log
	driver_logfile=$nvlog/$new_version-$KERNEL.log
	# other vars
	dkms_kernel=/lib/modules/$KERNEL/extra
	install_bin="./nvidia-installer"
	## tell script that all post_install process came from install.
	from_install=1
	if [[ -s $driverun ]] ; then
	{	sleep 1
		n=4
		echo "# Backing up old driver, if any."; echo "$n"; n=$[ $n+4 ]
		# backup driver repository (shits happens!)
		if [ -d $croot/nvidia.$old_version ]; then
			bak_version=$old_version
			backup_old_version
			if [[ -s $nvbackup/nvidia.$bak_version.tar.gz ]]; then
				printf "$vB$m_04_01$end$gB $val_04_P$end> $m_04_01a\n" > $reportlog
			else
				printf "$vB$bak_version $m_04_06$end$gB $val_04_S$end> $m_04_01b\n" > $reportlog
			fi
		else
			printf "$vB$m_04_01$end$gB $val_04_P$end> $m_04_01c\n" > $reportlog
		fi
		# making installation directories in case installer doesn't find them
		[ -d $croot_64 ] || ( mkdir -p $croot_32 $croot_64 $xorg_dir )	
		# remove previous driver, because of "registered driver install break", if any
		echo "# $m_03_60"; sleep 1; echo "$n"; n=$[ $n+4 ]
		## create base libs install directories
		for d in "$croot/$predifined_dir $croot_32 $croot_64 $xorg_dir"; do
			mkdir -p $d
		done
		cd $croot
		## set compil/install time options
		nv_build_options
		## code info that options are setted.
		opts_setted=1
		## install default libs with nvidia-installer
		{ nv_cmd_install_libs
		} | zenity --width=450 --title="Zenvidia" --progress --pulsate --auto-close \
		--text="$v\LIBRARIES$end : Extract and install default nvidia libs..."
		sleep 1; echo "$n"; n=$[ $n+4 ]
		## report nvidia installer warning message
		if [ $(cat $lib_logfile| grep -c "WARNING") -gt 0 ]; then
			if [ $(cat $lib_logfile| grep "WARNING"| grep -c "libGL.so") -gt 0 ]; then
				printf "$vB$m_04_02$end$jB $val_04_N$end> $m_04_02a\n" >> $reportlog
			elif [ $(cat $lib_logfile| grep "WARNING"| grep -c "libglvnd") -gt 0 ]; then
				printf "$vB$m_04_02$end$jB $val_04_N$end> $m_04_02c\n" >> $reportlog
			fi
		fi
		## control if libraries are properly installed
		if [[ $(ls -1 $croot_64| grep -c ".*") -lt 40 ]]|| \
		[[ $(ls -1 $croot_32| grep -c ".*") -lt 40 ]]; then
			zenity --width=450 --title="Zenvidia" --error --no-wrap \
			--text="$vB\LIBS INSTALL CONTROL RETURN ERRORS.$end$v.\nCheck $lib_logfile for more details.$end"
			if [ $? = 0 ]; then base_menu; fi
		else
			printf "$vB$m_04_03$end$gB $val_04_S$end> $m_04_03a\n" >> $reportlog
		fi

		# nv_cmd processes (install without X crash )
		echo "# Package conpil and install"; sleep 1
		# install driver first, then control if everything ok
		{ nv_cmd_install_driver
		} | zenity --width=450 --title="Zenvidia" --progress --pulsate --auto-close \
		--text="$v\DRIVER$end : Install driver and/or dkms modules."
		sleep 1; echo "$n"; n=$[ $n+4 ]
		# default installer couldn't sometime work. Before going on and
		# simply exit, checking if install work-arround did its job.
		mod_version=$($d_modinfo -F version nvidia)
		if [ $(cat $driver_logfile| grep -c "ERROR") -gt 0 ]; then
			if [ $(cat $driver_logfile| grep "ERROR"| grep -c "Installation has failed") -gt 0 ]; then
				if [[ $($d_modinfo -F version nvidia) != $new_version ]]; then
					rm -f $buildtmp/template-*
					zenity --width=450 --title="Zenvidia" --error --no-wrap \
					--text="$vB\DRIVER LEGACY INSTALL SEND FATAL ERROR !$end\n\n$v\It probably mean it didn't compil properly with any work arround.$end" \
					--icon-name=xkill --ok-label="$MM"
					if [ $? = 1 ]; then base_menu; fi
				else
					if [ $(cat $driver_logfile | grep "ERROR"| grep -c "nvidia-drm") -gt 0 ]; then
						printf "$vB$m_04_02$end$rB $val_04_A$end> $m_04_02b\n" >> $reportlog
					fi
					printf "$vB$m_04_04$end$gB $val_04_S$end> $m_04_04a\n" >> $reportlog
				fi
			fi
		fi
		if [[ $($d_modinfo -F version nvidia) != $new_version ]]; then
			rm -f $buildtmp/template-*
		fi

		cd $nvtmp
		if [[ -s $nvtmp/NVIDIA-Linux-$ARCH-$new_version/nvidia-installer ]]; then 
			echo "# Backup new Nvidia-Installer to $nvdir"; sleep 1
			echo "$n"; n=$[ $n+4 ]
			cp -f NVIDIA-Linux-$ARCH-$new_version/nvidia-installer $nvdir
			sleep 1
		else
			zenity --width=450 --title="Zenvidia" --error --no-wrap \
			--text="$vB\Nvidia-Installer not found$end$v.\nAbort and back to main.$end"
			sleep 2
			exit 0
			base_menu
		fi
		
		if [[ $($d_modinfo -F version nvidia) != $new_version ]]; then
			echo "# WARNING : nvidia-installer didn't match new $version module."
			sleep 1
		else
			echo "# Update new driver version..."; sleep 1; echo "$n"; n=$[ $n+4 ]
			printf "$new_version" > $nvdir/version.txt
			echo "# Update compatibility data files..."; sleep 1; echo "$n"; n=$[ $n+4 ]
			COMPAT=('A1. N' '390' '367' '340' '304' '173.14' '96.43' '71.86' '\*')
			last='Below are'
			N=0
			until [ $N = $((${#COMPAT[*]}-1)) ]; do
				new=${COMPAT[$N]}
				pattern='The '
				if [ $(echo "$new"| grep -c "A1") -gt 0 ]; then suffix='txt'; pattern=''; else suffix=$new'.xx'; fi
				cat $nvtmp/NVIDIA-Linux-$ARCH-$new_version/README.txt | sed -En "/^$pattern$new(.xx)?/,/^.*$last(.xx)?/p" > $nvdir/supported.$suffix
				last=${COMPAT[$N+2]}
				((N++))
			done
		fi
		# Backup install binary in release archive
		if [ ! -f $nvdl/nv-update-$new_version ] ; then
			cp -f $driverun $nvdl/nv-update-$new_version
			if [[ -f $nvdl/nv-update-$new_version ]] ; then
				echo "# $m_03_61 $new_version $m_03_62."; sleep 1; echo "$n"; n=$[ $n+4 ]
				echo "# $m_03_63."; sleep 1; echo "$n"; n=$[ $n+4 ]
			else
				zenity --width=450 --title="Zenvidia" --error --no-wrap \
				--text="\n$v $m_03_61$j $new_version$v $m_03_64."
			fi
		else
			echo "# nv-update-$new_version already present in path, skip."; sleep 1
			echo "$n"; n=$[ $n+4 ]
		fi
		# if all went fine, process to post install system conf.
		post_install
		echo "100"; sleep 2
		
		## basic install report.
		if [[ $mod_version == $new_version ]]; then
			if [ $(ls -1 $croot_64| grep -c ".*") -gt 40 ]|| \
			[ $(ls -1 $croot_32| grep -c ".*") -gt 40 ]; then
				zenity --title="Zenvidia" --question --no-wrap --icon-name=swiss_knife \
				--text="$(printf "$rB$tit_03_65$end$v:\n$(cat $reportlog)\n\n$vB$rep_03_65\n$ansWN$end$end" "$new_version")" --ok-label="$lab_03_65a" --cancel-label="$lab_03_65b"
				if [ $? = 0 ]; then edit_xorg_conf; else base_menu; fi
			fi
		fi
		
		} | zenity --width=450 --title="Zenvidia" --progress --percentage=1 --auto-close
	else
		zenity --width=450 --title="Zenvidia" --error \
		--text="$v$m_03_66$end\n$v$m_03_65$end$y\http://www.nvidia.fr/Download/Find.aspx?lang=en$end\n$v $m_03_68, $v$m_03_67$end$y https://download.nvidia.com/XFree86/$end"
		if [ $? = 0 ]; then base_menu; fi
	fi
}

backup_driver(){
	# link driver for multi driver config
	echo "# DRIVER : Rename and backup driver..."; echo "$n"; n=$[ $n+4 ]
	mods=( nvidia nvidia-uvm nvidia-modeset nvidia-drm )
	if [ -f $kernel_path/nvidia.ko ]; then
		# Case : install without dkms process
		cd $kernel_path
		mkdir -p $croot_all/$KERNEL
		if [[ -s $kernel_path/nvidia.ko ]]; then
			for mod in "${mods[@]}"; do
				[ $kernel_path/$mod.ko ]&& cp -f ./$mod.ko $croot_all/$KERNEL/
			done
			echo "# DRIVER : Driver install & backup success."; sleep 1
			echo "$n"; n=$[ $n+4 ]
			/usr/sbin/depmod $KERNEL -a
		else
			echo "# DRIVER : ERROR "; sleep 1; echo "$n"; n=$[ $n+4 ]
			zenity --width=450 --title="Zenvidia" --error \
			--text="$j\Driver $version install abort$end$v.\nExit to main menu.$end"
			base_menu
		fi
	fi
}
backup_old_version(){
	[ -d $nvbackup ]|| mkdir -p $nvbackup
	if [ -d $croot/nvidia.$bak_version ]; then
		orig_dir=$croot/nvidia.$bak_version
		bak_dir=$nvtmp/nvidia.$bak_version
		mod_ver=$($d_modinfo -F version $orig_dir/$KERNEL/nvidia.ko )
		[ -d $orig_dir/$KERNEL ]|| mkdir -p $orig_dir/$KERNEL
		[[ $mod_ver ]]|| cp -f /lib/modules/$KERNEL/extra/nvidia* $orig_dir/$KERNEL/

#		mkdir -p $bak_dir/{etc,usr/src,var/lib/dkms/nvidia,usr/local/{bin,share,$master$ELF_32,$master$ELF_64,etc/ld.so.conf.d}}
		mkdir -p $bak_dir/{etc/ld.so.conf.d,usr/{src,lib},var/lib/dkms/nvidia,usr/local/{bin,share,$master$ELF_32,$master$ELF_64}}
		if [[ $new_version ]];then
			mv -f $orig_dir/ $bak_dir/
		else
			mkdir -p $bak_dir
			cp -Rf $orig_dir $bak_dir/
		fi
		cp -Rf /var/lib/dkms/nvidia/$bak_version $bak_dir/var/lib/dkms/nvidia/
		cp -Rf /usr/src/nvidia-$bak_version $bak_dir/usr/src/
#		cp -Rf /usr/lib/nvidia $bak_dir/usr/lib/
		cp -Rf /etc/{OpenCL,zenvidia} $bak_dir/etc/
#		cp -Rf /etc/ld.so.conf.d/nvidia-* $bak_dir/etc/ld.so.conf.d/
		cp -Rf /usr/local/bin/nvidia-* $bak_dir/usr/local/bin/
		cp -Rf /usr/local/$master$ELF_64/libnvidia-{{cfg,fbc,gtk2,gtk3}.{so,so.1},*.$bak_version} $bak_dir/usr/local/$master$ELF_64/
		cp -Rf /usr/local/$master$ELF_32/libnvidia-{fbc{.so,.so.1},*.$bak_version} $bak_dir/usr/local/$master$ELF_32/
		cp -Rf /usr/local/share/nvidia $bak_dir/usr/local/share/
		if [ $(ls -1 /etc/ld.so.conf.d/| grep -c "nvidia") -gt 0 ]; then
			mkdir -p $bak_dir/etc/ld.so.conf.d
			cp -Rf /etc/ld.so.conf.d/nvidia-* $bak_dir/etc/ld.so.conf.d/
		fi
		if [ $(ls -1D /usr/lib/ | grep -c "nvidia") -gt 0 ]; then
			mkdir -p $bak_dir/usr/lib
			cp -Rf /usr/lib/nvidia $bak_dir/usr/lib/
		fi
		printf "$bak_version\n" > $bak_dir/version.txt
		
		cd $bak_dir/usr/local/$master$ELF_64/
		for links in {gtk2,gtk3}; do
			ln -sf libnvidia-$links.so.$bak_version libnvidia-$links.so.1
		done
		cd $nvtmp
		tar -zcf $nvbackup/nvidia.$bak_version.tar.gz nvidia.$bak_version
		rm -Rf $bak_dir
	fi
}
upgrade_new_kernel(){
	unset kern_list
	up_version=$(cat $nvdir/version.txt)
	ls_kern=$(ls -1 /boot| grep -v "rescue"| grep "vmlinuz"| sed -n 's/^[[:alpha:]]*-//p')
	for linuz in ${ls_kern}; do
		kern_list+=("false")
		kern_list+=("$linuz")
	done
	NEW_KERNEL=$(zenity --height=300 --title="Zenvidia" --list --radiolist --hide-header \
	--text "$menu_msg\n$v$m_02_07$end $j$up_version$end $v$m_02_08$end $j$board$end.
\n$v$m_02_09$end" --column "1" --column "2" --separator=";" "${kern_list[@]}" false "$MM"
	if [ $? = 1 ]; then base_menu; fi )
	if [ $(echo -e "$NEW_KERNEL"| egrep -c "[0-9]+") -gt 0 ]; then
		upgrade_kernel
	else
		if [[ $NEW_KERNEL == $MM ]]; then base_menu; else exit 0; fi
	fi
}
upgrade_kernel(){
	[ $install_type = 1 ]&& if_optimus
	[ $install_type = 0 ]&& if_single
	if [[ $NEW_KERNEL ]];then
		KERNEL=$NEW_KERNEL
	fi
	if [ $upgrade_other = 1 ]; then
		kernel_path="/lib/modules/$KERNEL/extra/"
		kernel_src="/usr/src$alt/$KERNEL"
	fi
	drv_release=$(ls $nvdl/ | grep "$version")
	confirm_msg="$v$m_02_01$end $j$KERNEL$end:\n$v$drv_install_msg.$end" 
	val_title="Zenvidia"
	val_confirm="$CC"
	val_back="$MM"
	val_exit="base_menu"
	win_confirm
	( echo "# $m_02_01 $KERNEL ..."
	cd $nvdl/
	nv_cmd_update
	if [[ ! -f $kernel_path/nvidia.ko || $KERNEL != $vermagic ]]; then
		zenity --width=450 --title="Zenvidia" --error \
		--text="$j INSTALL ABORT ABNORMALY, check $(echo "$logfile" | sed -n 's/^.*=//p')$end."
		exit 0
	fi
	if [ $install_type = 1 ]; then
		if [ $use_bumblebee = 1 ]; then
			echo "# $m_02_03."; sleep 1
			sys_service='bumblebeed'
			dis_service=''
			service_check
		fi
		echo "# $m_02_06" ; sleep 1
	fi
	new_version=$version
	backup_driver
	) | zenity --width=450 --title="Zenvidia" --progress --pulsate --auto-close
	if [ -e $nvlog/install.log ]; then cp -f $nvlog/install.log $nvlog/update-$KERNEL.log; fi
	base_menu
}

## INSTALL MODE DIRECTORY OPTIONS 
extract_build(){
	[ -d $nvtmp ]|| mkdir -p $nvtmp
	[ -d $buildtmp ]|| mkdir -p $buildtmp
	cd $nvtmp
	[ ! -d NVIDIA-Linux-$ARCH-* ]|| rm -Rf NVIDIA-Linux-$ARCH-*
	(	bash $driverun -x 
		sleep 1
	) | zenity --width=450 --title="Zenvidia" --progress --pulsate --auto-close \
	--text="$v$m_02_10...$end"
#	if [ -s NVIDIA-Linux-$ARCH-*/nvidia-installer ] ; then
	old_version=$(cat $nvdir/version.txt)
	if [[ $LAST_PACK ]]; then
	new_version=$LAST_PACK
	else
	new_version=$(echo "$driverun" | sed -n 's/^.*-//p')
	fi
	if [[ -n $new_version && $new_version != $old_version ]]; then
#	if [ -d NVIDIA-Linux-$ARCH-/ ] ; then
		cp -f NVIDIA-Linux-$ARCH-$new_version/nvidia-installer .
#		new_version=$(cat NVIDIA-Linux-$ARCH-*/.manifest | sed -n '2p')
		printf "$new_version\n" > $nvdir/new_version.txt		
#		if [[ $(cat $nvdir/version.txt) ]]&&[[ $(cat $nvdir/version.txt) != $new_version ]]; then
		if [[ -n $old_version ]]; then
#			old_version=$(cat $nvdir/version.txt)
			printf "$old_version\n" > $nvdir/old_version.txt
		else
			old_version='none'
		fi
	else
		zenity --width=450 --title="Zenvidia" --error \
		--text="$j $m_02_11$end,$v $m_02_12$end."
		exit 0
	fi
	cd $nvdir
}
shared_vars(){
	if [ ! $driverun ]; then
		if [ $(printf "$LAST_PACK"| grep -c .) -gt 0 ]; then
			new_version=$LAST_PACK	
		else
			new_version=$version
		fi
	else
		if [ $(printf "$driverun"| grep -c "$version") -gt 0 ];then
			new_version=$version
		else
			new_version=$(printf "$driverun"| sed -n "s/^.*-//p")
		fi
	fi
	predifined_dir=nvidia.$new_version
	croot_all=$croot/$predifined_dir
	croot_32=$croot/$predifined_dir/$master$ELF_32
	croot_64=$croot/$predifined_dir/$master$ELF_64
	xorg_dir=$croot/$predifined_dir/xorg
	xorg_def=/usr/$master$ELF_64/xorg
	kernel=$(uname -r)
	kernel_root=/lib/modules/$kernel
	kernel_path=$kernel_root/extra
}
# OPTIMUS PRESENCE CONTROL
if_optimus(){
	shared_vars
	predifine=3
	[ $install_type = 1 ]|| sed -i "s/install_type=[0-9]/install_type=1/" $script_conf
	drv_install_msg="$v$m_02_13.$end"
	export install_type=$install_type
}
# PROPRIATARY DRIVER CUSTOM INSTALL
if_single(){
	shared_vars
	predifine=1
	[ $install_type = 0 ]|| sed -i "s/install_type=[0-9]/install_type=0/" $script_conf
	drv_install_msg="$v$m_02_15.$end"
	export install_type=$install_type
}

#install_type_sel(){
#	A1="$m_01_22"
#	A2="$m_01_24"
#	dir_cmd=$(zenity --width=450 --height=300 --title="Zenvidia" --list --radiolist \
#	--text="$v$m_01_25 :$end\n" \
#	--hide-header --column "1" --column "2" --column "3" --separator=";" --hide-column=2 \
#	false 1 "$A1" false 2 "$A2" false 3 "$MM")
#	if [ $? = 1 ]; then exit 0; fi
#	case $dir_cmd in
#		"1") if_single ;;
#		"2") from_menu_install=1
#			menu_optimus
#			if [ $use_bumblebee = 1 ]; then
#				opti_exec=$install_dir/bin/optirun
#				opti_ctrl=local_src_ctrl
#				msg=$m_01_31
#			else
#				opti_exec=/usr/sbin/nvidia-prime-select
#				opti_ctrl=prime_src_ctrl
#				msg=$m_01_32
#			fi
#			if [ -x $opti_exec ]; then
#				install_msg="$m_01_27a ($msg $m_01_27b)$end"
#			else
#				install_msg="$j\ATTENTION$end$v : $msg $m_01_28$end"
#			fi
#			if_optimus
#		;;
#		"4") base_menu ;;
#	esac
#	install_drv
#}
## forbid primus install
install_type_sel(){
	A1="$m_01_22"
	A2="$m_01_24"
	dir_cmd=$(zenity --width=450 --height=300 --title="Zenvidia" --list --radiolist \
	--text="$v$m_01_25 :$end\n" \
	--hide-header --column "1" --column "2" --column "3" --separator=";" --hide-column=2 \
	true 1 "$A1" false 2 "$MM")
	if [ $? = 1 ]; then exit 0; fi
	case $dir_cmd in
		"1") if_single ;;
		"2") base_menu ;;
	esac
	install_drv
}
### FROM A USER DIRECTORY INSTALL FUNCTION.
from_directory(){
	nv_dir(){
		table_opts='--column \"1\" --column \"2\" --separator=\";\"'
		cd $nvdl; n=1
		for local_drv in $(ls -1 $nvdl); do
			list_drv+=("false")
			list_drv+=(" $local_drv")
		done
		drv_pick=$(zenity --width=450 --height=400 --title="Zenvidia" $zen_opts \
		--text="$vB$m_01_05 $nvdl :$end"\
		$table_opts ${list_drv[@]} false "$PM")
		if [ $? = 1 ]; then base_menu; fi
		if [[ "$drv_pick" == "$PM" ]]; then from_directory; fi
		driverun=$nvdl/$drv_pick
		new_version=$(printf "$driverun"| sed -n "s/^.*-//g;p")
	}
	home_dir(){
		cd /home
		drv_pick=$(zenity --width=450 --height=400 --title="Zenvidia" --file-selection \
		--filename="/home/$user/$w_01" --file-filter=".run" --text="$vB$m_01_06$j $homerep$end")
		if [ $? = 1 ]; then base_menu; fi
		chmod a+x $drv_pick
		driverun=$drv_pick
		new_version=$(printf "$driverun"| sed -n "s/^.*-//g;p")
	}
	A="$m_01_03"
	B="$m_01_04"
	zen_opts='--list --radiolist --hide-header'
	table_opts='--column "1" --column "2" --column "3" --separator=";" --hide-column=2'
	n=1
	from_cmd=$(zenity --width=450 --height=400 --title="Zenvidia" $zen_opts \
	--text="$vB $m_01_01$end\n$j$(printf "$(ls $nvdl|sed -n 's/^/\t - /p')")$end\n$vB$m_01_02$end" \
	$table_opts false 1 "$A" false 2 "$B" false 3 "$PM" )
	if [ $? = 1 ]; then base_menu; fi
	case $from_cmd in
		"1") nv_dir; install_type_sel ;;
		"2") home_dir; install_type_sel ;;
		"3") menu_install ;;
	esac
}

# check avialable updates XXX
check_update(){
	( 	wget -q -O $nvtmp/drvlist_0 https://$nvidia_ftp-$ARCH/
		cat $nvtmp/drvlist_0 | sed -En "s/^.*href.*'(.*)\/'>.*$/\1/p" > $nvtmp/drvlist
		rm $nvtmp/drvlist_0
		wget -q -O $nvtmp/last_update https://$nvidia_ftp-$ARCH/latest.txt
	) | zenity width=400 --title="Zenvidia" --progress --pulsate --auto-close \
	--text="$v$m_01_07$end"
	LAST_IN=$version
	LAST_DRV=$(cat $nvtmp/last_update | awk '{ print $1 }')
	LAST_BETA=$(tac $nvtmp/drvlist | sed -n 1p)
	# compatibilty control
	if [[ $LAST_DRV == $LAST_BETA ]] ; then
			DIFF_list=$LAST_DRV
	else
			DIFF_list="$LAST_DRV $LAST_BETA"
	fi
	w_height=355
	unset dl_allow COMP_L COMP_I
	for DRV in $DIFF_list; do
		## prevent and remove compatibility list first
		if [[ -e $nvtmp/compat.$DRV ]]; then rm -f $nvtmp/compat.$DRV; fi
		(wget -q -O $nvtmp/upt_compat.$DRV https://$nvidia_ftp-$ARCH/$DRV/README/supportedchips.html
		sleep 1
		)| zenity width=400 --title="Zenvidia" --progress --pulsate \
		--auto-close --text="$v$m_01_08$end ($DRV)..."
		## build a list of driver version compatibility for the installed devices.
		for dev_class in ${vnd_dev_list[@]}; do
			if [ $(echo -e "${pci_dev[*]}" |grep -ic "$dev_class") -gt 0 ]; then
				cat $nvtmp/upt_compat.$DRV | grep "<tr\|<td\|</tr>"| \
				perl -n -pe "s|(<(/\|)t[r,d](>\| id=\"))||,s|(\">\|</td>)\n|,|p" | \
				grep -i "$dev_class" >> $nvtmp/compat.$DRV
			fi
		done
		## test existence of the new driver version in remote tree.
		## and prepare optional messages to display.
		if [ $(cat $nvtmp/drvlist| grep -c $DRV) -gt 0 ]; then
			downloadable=1
			dl_allow+=( "1,$DRV" )
			dl_warn=''
		else
			downloadable=0
			dl_allow+=( "0,$DRV" )
			dl_warn='is not downloadable yet and wont be list'
		fi
		for e in $pci_dev_nb; do
			## find and identify isntalled devices in driver version compatibility lists.
			DEV_slot=$(printf "${slot_id[$e]}"| sed -n "s/[a-z]./\U&/g;p")
			DEV_filter=$(cat $nvtmp/compat.$DRV| egrep -i "${dev[$e]}.*$DEV_slot")
			DEV_nm=$(printf "$DEV_filter"|cut -d"," -f2)
			VDPAU=$(printf "$DEV_filter"|cut -d"," -f4)
			## create a list of nvidida devices for lib install fatal log messages.
			if_prev=$(echo "${COMP_I[*]}"| grep -c "$DEV_nm")
			## eval text to display in window message.
			if [[ -n $DEV_filter ]]; then
				if [ $VDPAU != '' ]; then 
#					COMP_V=0
					comp_v="(VDPAU class $VDPAU)"
				else
#					COMP_V=1
					comp_v=""	
				fi
#				COMP_B=0
				comp_b="$m_01_10. $comp_v"
				comp_c="$v$m_01_11$end"
				comp_check=0
			else
#				COMP_B=1
#				COMP_V=1
				comp_b="$vB$m_01_09$end"
				comp_c="$rB$m_01_12$end"
				comp_check=1
				comp_v=""
			fi
			if [ $if_prev -eq 0 ]; then
				COMP_I+=( "$DEV_nm\n" )
			fi
			if [[ $DEV_filter ]]; then
				COMP_L+=("$j${dev[$e]}$end $v($DRV), $comp_b$end\n$j$DRV$end $comp_c")
				w_height=$(($w_height+30))
			fi
		done
		if [ $downloadable = 0 ];then
			COMP_L+=("$rB\Driver $DRV, $dl_warn$end")
#			dl_warn_msg="\n$rB$DRV $dl_warn$end"
		fi
		if [ $if_update = 0 ]; then
			dl_warn_msg="\n$vB\Remote packages list available in next window.$end"	
		fi
	done
	## write it in default script directory for further use.
	echo -e "${COMP_I[@]}" > $nvtmp/compat.update
	sed -in "/^[[:space:]]*$/d;s/^\ //g" $nvtmp/compat.update
	ifs=$IFS
	IFS=$(echo -en "\n\b")
	compat_msg="${COMP_L[*]}\n"
	IFS=$ifs
	win_update
}
win_update(){
	## define window messages and display compatibilities.
	in_local=$(ls -1 $nvdl/ | grep -c "$LAST_DRV\|$LAST_BETA")
	if [ $in_local -gt 0 ]; then
		in_offi=$(ls -1 $nvdl/ | grep -c "$LAST_DRV")
		in_beta=$(ls -1 $nvdl/ | grep -c "$LAST_BETA")
	fi
	unset more_msg
	case $in_local in 
		## ↓ if not dowloaded packages are detected, set ui mode to full and process to next 
		0) ui_mod=1; extra_msg="\n$v$m_01_13$end";;
		## ↓ if one or more packages are detected, set ui mode to full.
		## Then check if ui mode has to be set differently.
		1)	ui_mod=1
			## ↓ check if last driver is installed and mack it 'installed'. 
			if [[ $LAST_IN == $LAST_DRV ]]; then set_in=" ($m_01_18)"; fi
			## ↓ control present packages and choose waht to display.
			for more_drv in {"$in_offi,$LAST_DRV","$in_beta,$LAST_BETA"}; do
				_exist=$(echo "$more_drv"|cut -d',' -f1)
				_drive=$(echo "$more_drv"|cut -d',' -f2)
				case $_exist in
					0) more_msg+=( "\n$j$_drive$end$vB $m_01_14b $m_01_16.$end" ) ;;
					1) more_msg+=( "\n$j$_drive$end$vB $m_01_14a $m_01_16.$end$v$set_in$end" ) ;;
				esac
			done
#			start_msg="$j$LAST_DRV$end$vB $m_01_14a $m_01_16.$end$v$set_in$end"
			start_msg="${more_msg[@]}"
#			more_msg=''
			end_msg="\n$m_01_13"
		;;
		## set ui_mod to 0 if offi and beta exist or are the same.
		2) if [[ $in_offi = 1 && $in_beta = 1 ]]; then
				ui_mod=0
				if [[ $LAST_DRV == $LAST_BETA ]]; then
					start_msg="$j$LAST_DRV$end$rB, $m_01_14c $m_01_16.$end"
				else
					if [[ $LAST_IN == $LAST_DRV||$LAST_BETA ]]; then
						set_in=" ($LAST_IN $m_01_18)"
					fi
					start_msg="\n$rB$m_01_14c $m_01_16 $set_in.$end"
					end_msg=$m_01_17
				fi
			fi
		;;
	esac
	if [ $ui_mod = 1 ]; then w_height=$(($w_height+65)); fi
#			extra_msg="\n$start_msg$more_msg\n$v$end_msg$end"
	extra_msg="\n$start_msg\n$v$end_msg$end"
	case $ui_mod in
		0)	w_height=300
			zen_opts='--info --icon-name=swiss_knife '
			table_opts=''
			list_opts='';;
		1)	zen_opts='--list --radiolist --hide-header'
			table_opts='--column "1" --column "2" --column "3" --separator=";" --hide-column=2'
			list_opts="false 1 $_01 false 2 $_06 false 3";;
		2)	w_height=300
			zen_opts="--question --ok-label=$_01 --cancel-label=$R"
			table_opts=''
			list_opts=''
			extra_msg="\n$v$m_01_13$end";;
	esac
	sel_cmd=$(zenity --width=450 --height=$w_height --title="Zenvidia" $zen_opts \
	--text="$rBB$m_01_19$end\n
$v $msg_0_01$end\t$j$LAST_IN$end
$v $m_01_20$end\t$j$LAST_DRV$end
$v $m_01_21$end\t$j$LAST_BETA$end\n
$compat_msg$dl_warn_msg$extra_msg" $table_opts $list_opts "$R" )
	if [ $? = 0 ]; then
		case $ui_mod in
			0) base_menu ;;
			1) case $sel_cmd in
					"1") from_net ;;
					"2") download_only ;;
					"3") base_menu ;;
				esac ;;
			2) from_net ;;
		esac
	else
		base_menu
	fi	
}
download_menu(){
	unset DM_list
	dn=1
	if [ $if_update = 1 ]; then
		D1="$LAST_DRV ($m_01_41)"
		D2="$LAST_BETA ($m_01_42)"
	else
		D1="$LAST_DRV ($m_01_41)"
		D2="$LAST_BETA ($m_01_42)"
		D3="$m_01_43a ($m_01_43b 3xx.)"
		dl_allow+=( "1,$m_01_43b" )
	fi
	ifs=$IFS
	IFS=$(echo -en "\n\b")
	for drv_ld in {"$D1","$D2","$D3"}; do
		## if ldriver has clearence to download, add it to list.
		## else, don't.
		for allowed in ${dl_allow[@]}; do
			dl_clear=$(echo -e "$allowed"| cut -d',' -f1)
			drv_clear=$(echo -e "$allowed"| cut -d',' -f2)
			if [ $(echo -e "$drv_ld"| grep -c "$drv_clear") -gt 0 ]; then
				if [ $dl_clear = 1 ]; then
					if [ ${#DM_list[@]} -gt 0 ]; then
						list_check=$(echo "${DM_list[*]}"| grep -c "$drv_ld")
					else
						list_check=0
					fi
					if [ $list_check -eq 0 ]; then
						DM_list+=("false")
						DM_list+=("$dn")
						DM_list+=("$drv_ld")
						((dn++))
					fi
				fi
			fi
		done
	done
	IFS=$ifs
	## FIXME Check if tips exist. (?)
	if [ $hlp_txt = 1 ]; then
		w_height='200'
	else
		w_height='200'
	fi
	dl_cmd=$(zenity --width=450 --height=$w_height --title="Zenvidia" --list --radiolist \
	--text="$v$m_01_40$end" --hide-header \
	--column "1" --column "2" --column "3" --separator=";" --hide-column=2 \
	"${DM_list[@]}" false $dn "$MM" )
	if [ $? = 1 ]; then base_menu; fi
	if [ $if_update = 1 ]; then
		case $dl_cmd in
			"1") LAST_PACK=$LAST_DRV; last_pack ;;
			"2") LAST_PACK=$LAST_BETA; last_pack ;;
			"$dn") base_menu ;;
		esac
	else
		case $dl_cmd in
			"1") LAST_PACK=$LAST_DRV; last_pack ;;
			"2") LAST_PACK=$LAST_BETA; last_pack ;;
			"3") package_list; LAST_PACK=$PICK_DRV; last_pack ;;
			"$dn") base_menu ;;
		esac
	fi
	
}
download_only(){
	cd $nvupdate
	download_menu
	if [ -f $nvupdate/$run_pack ]; then
		zenity --info --title="Zenvidia" --no-wrap --icon-name=swiss_knife \
		--text="$v $m_01_46$end $j$LAST_PACK$end $v$m_01_47.\n$MM$end"
		mv -f $nvupdate/$run_pack $nvdl/nv-update-$LAST_PACK
		chmod 755 $nvdl/nv-update-$LAST_PACK
		base_menu
	else
		zenity --width=450  --title="Zenvidia" --error \
		--text="$v $m_01_46$end $j$LAST_PACK$end $v$m_01_48.\n $m_01_50$end $j$run_pack$end $v$m_01_51.\n$MM.$end"	
		base_menu
	fi
#		# TODO install from GIT, then back to download
}
### UPDATE FUNCTION, FROM INTERNET. XXX
package_list(){
	## TODO include remote driver existence test here.
	unset drv_list
	pck_drv=$(tac $nvtmp/drvlist | egrep -v "^((1.)|(71.)|(96.)|(2.))")
	for line in $pck_drv; do
		drv_list+=("$line")
	done
	PICK_DRV=$(zenity --width=450  --height=300 --title="Zenvidia" --list --radiolist \
	--text "$rBB$m_01_52$end" --hide-header --column "1" --column "2" --separator=";" \
	"${drv_list[@]}")
	if [ $? = 1 ]; then base_menu; fi
}
last_pack(){
	track(){
    # picked up & inspired by winetricks download progress commande:
    # Parse a percentage, a size, and a time into $1, $2 and $3
    # then use them to create the output line.
   	perl -p -e "$| = 1; s|^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$|\1\n# $run_pack\t(\1): $m_01_54 \3\t\2\/s|"
	}
	download_cmd(){
		wget -c https://$nvidia_ftp-$ARCH/$LAST_PACK/$run_pack $nvupdate/ 2>&1
	}
	( wget -q -O $nvtmp/bug_list_0 https://$nvidia_ftp-$ARCH/$LAST_PACK/
	cat $nvtmp/bug_list_0 | egrep -o "href='NVIDIA.*[0-9]+.*'"| perl -pe "s/^.*\'(.*)\'/\1/p" \
	> $nvtmp/selector
	sleep 2
	) | zenity --width=500 --progress --pulsate --auto-close --text="$v$m_01_55$end"
	if [ $(cat $nvtmp/selector | grep -c "$LAST_PACK") -gt 0 ] ; then
		RUN_PACK=$(cat $nvtmp/selector)
	fi
	unset drv_list
	for line in $RUN_PACK; do
		drv_list+=("false")
		drv_list+=("$line")

	done
	run_pack=$(zenity --width=450 --height=300 --title="Zenvidia" --list \
	--text="$v$m_01_40$end" --radiolist --hide-header \
	--column "1" --column "2" "${drv_list[@]}" --separator=";")
	if [ $? = 1 ]; then exit 0; fi
	( download_cmd | track
	) | zenity --width=500 --progress --auto-close --title="$m_01_44 $LAST_PACK"
	err=$?
    if test $err -gt 128; then
        if pid=`ps -A | grep ."wget" | awk '{print $1}'`; then
            echo User aborted download, killing wget
            kill $pid
        fi
    fi
    return $err
    _local=$(stat -c "%s" $nvupdate/$run_pack)
    _remote=$(cat $nvtmp/selector | grep -w "$run_pack"|sed -n "/.run$/p"|awk '{print $5}')
    [ $_remote = $_local ]|| { 
    zenity --height=100 --error --icon-name=xkill --no-wrap \
    --text="$v\Download unexpected end.\nPlease restart driver download from $vB\Update$end menu$end" --ok-label="Oh! Fuck!"
    if [ $? = 0 ]; then base_menu; fi
    }
}
from_net(){
# download functions
		cd $nvupdate
		download_menu
		driverun=$nvdl/nv-update-$LAST_PACK
		if [ -f $nvupdate/$run_pack ]; then
			zenity --info --title="Zenvidia" --no-wrap --icon-name=swiss_knife \
			--text="$v $m_01_46$end $j$LAST_PACK$end $v$m_01_47.$end"
			mv -f $nvupdate/$run_pack $nvdl/nv-update-$LAST_PACK
			chmod 755 $nvdl/nv-update-$LAST_PACK
		fi
		install_type_sel
		#rm -f $nvtmp/drvlist $nvtmp/last_up
}
## TOOLS
win_confirm(){
	# popup confirmation window to be clomplete with the following vars:
	#	confirm_msg="" TEXT
	#	val_title="" TEXT
	#	val_confirm="" TEXT
	#	val_back="" TEXT
	#	val_exit="" EXIT CMD
	confirm_w=$(zenity --title="$val_title" --list --radiolist \
	--hide-header --text "$confirm_msg\n\n$v$m_01_13$end" --hide-column "2" --column "1" --column "2" \
	--column "3" --separator=";" false 1 "$val_confirm" false 2 "$val_back")
#	if [ $? = 1 ]; then exit 0 ; fi
	if [ $? = 1 ]; then base_menu ; fi
	case $confirm_w in "2") $val_exit;; esac
}
## REPAIR TOOL
fix_broken_install(){
	confirm_msg="$vB$m_01_80$end"
	val_title="Zenvidia Repair"
	val_confirm="$m_01_83"
	val_back="$PM"
	val_exit="manage_pcks"
	win_confirm
	unset elf_lib_list msg
	elf_lib=("$ELF_64" "$ELF_32")
	if [ $install_type = 0 ]; then
		if [ ! -e /etc/ld.so.conf.d/nvidia-$master$ELF_TYPE.conf ]; then
			for nv_lib in "${elf_lib[@]}"; do
				ld_conf=$croot/nvidia/$master$nv_lib
				[[ $nv_lib == 64 ]]|| nv_lib=32
				nv_lib_file='/etc/ld.so.conf.d/nvidia-'$master$nv_lib'.conf'
				printf "$ld_conf" > $nv_lib_file
				msg+=("$v\Restored:$end $master$nv_lib NVIDIA libraries relink to /etc/ld.so.conf.d.\n")
			done
			ldconfig
		fi
	fi
	if [ ! -e /etc/X11/xorg.conf.nvidia.$version ]; then
		new_version=$version
		xorg_conf
		msg+=("$v\Restored:$end NVIDIA Xorg conf for $version driver re-installed in /etc/X11.\n")
	fi
	if [ ! -e /etc/OpenCL/vendors/nvidia.icd ]; then
		if [ $install_type = 0 ]; then
			opencl="libnvidia-opencl.so.1"
		else
			opencl="$croot/nvidia/$master$ELF_64/libnvidia-opencl.so.1"
		fi
		printf "$opencl\n" > /etc/OpenCL/vendors/nvidia.icd
		msg+=("$v\Restored:$end NVIDIA OpenCL relink to system /etc.\n")
	fi
	if [ ! -e /usr/$master$ELF_64/vdpau/libvdpau_nvidia.so.1 ]; then
		for lib_V in "${elf_lib[@]}"; do
			link_v=$(ls -l /usr/$master$lib_V/vdpau/libvdpau_nvidia.so.1| sed -n "s/^.*-> //p")
			if [[ ! $(printf "$link_v"|grep -o "$new_version") ]]; then
				ln -sf $croot/nvidia/$master$lib_V/vdpau/libvdpau_nvidia.so.$new_version /usr/$lib_V/vdpau/libvdpau_nvidia.so.1 
			fi
			msg+=("$v\Restored:$end NVIDIA vdpau libraries relink to /usr/$master$lib_V/vdapu.\n")
		done
		ldconfig
	fi
	if [ ! -e /lib/modules/$(uname -r)/extra/nvidia.ko ]; then
		if [ -d $croot/nvidia/$(uname -r) ]; then
			cp -f $croot/nvidia/$(uname -r)/* /lib/modules/$(uname -r)/extra/
		fi
		depmode -a
		msg+=("$v\Restored:$end NVIDIA $version drivers re-install in /lib/modules/$(uname).\n")
	fi
	if [ $(cat $grub_dir/grub.cfg|grep -c "rd.driver.blacklist=nouveau") -eq 0 ]; then
		if_blacklist
		msg+=("$v\Restored:$end Re-install Nouveau driver in blacklist and grub.cfg.")
	fi
	if [ $(printf "${msg[@]}"| grep -c "[a-z]") = 1 ]; then
		repair_msg="$vB$m_01_80$end" "$(printf " ${msg[*]}")"
	else
		repair_msg="$vB$m_01_82$end"
	fi
	zenity --width=450 --title="$val_title" --info \
		--no-wrap --icon-name=swiss_knife --text="$repair_msg"
		if [ $? = 0 ]; then base_menu ; fi 
}
## PACKAGE MANAGING
manage_pcks(){
	menu_packs=$(zenity --width=400 --height=300 --list \
	--radiolist --hide-header --title="Zenvidia" \
	--text "$rBB$_3d$end" \
	--column "1" --column "2" --column "3" --separator=";" --hide-column=2 \
	false 1 "$_6a" false 2 "$_6b" false 3 "$_6c" false 4 "$PM" )
	if [ $? = 1 ]; then exit 0; fi
	case $menu_packs in
		"1") remove_pcks ;;
		"2") backup_pcks ;;
		"3") restore_pcks ;;
		"4") menu_modif ;;
	esac
}
## TODO remove old backups, source dirs and dkms dirs if still exist. 
#remove_bkps(){}
remove_pcks(){
	# list package in release directory
	unset rm_packs packs_list
	for pack in $(ls -1 $nvdl); do
		packs_list+=("false")
		packs_list+=("$pack")
	done
	rm_packs=$(zenity --width=400 --height=300 --list --multiple \
	--checklist --hide-header --title="Zenvidia (remove)" \
	--text "$rBB$_6a$end" \
	--column "1" --column "2" --separator=" " \
	"${packs_list[@]}" )
	if [ $? = 1 ]; then base_menu; fi
	sel_cnt=$(printf "$rm_packs"| grep -c " ")
	zenity --width=300 --title="Zenvidia ($_6a)" --icon-name=swiss_knife --question \
	--text="$vB$(printf "$_6d\n\n$_6g" "$rm_packs")$end" --ok-label="$CC" --cancel-label="$PM"
	if [ $? = 0 ]; then
		for vers in ${rm_packs[@]}; do
			pack_vers=$(printf "$vers"|sed -n "s/^.*-//g;p")
			vers_ref=$(printf "$pack_vers"|sed -n "s/\.//p")
			if [ -d $croot/nvidia.$pack_vers ]; then
				zenity --width=300 --title="Zenvidia ($_6a)" --question \
				--text="$v$_6f $croot ?\n$_6g$end"
				if [ $? = 0 ]; then
					if [[ $ver_pack = $ver_txt ]]; then
						zenity --height=100 --title="Zenvidia ($_6a)" --icon-name=xkill \
						--error --no-wrap --text="$v$(printf "$wrn_06f" "$pack_vers")$end" \
						--ok-label="$lab_06f"
					else
						rm -Rf $croot/nvidia.$pack_vers
						rm -f $nvdl/nv-update-$pack_vers
					fi
				fi
			else
				rm -f $nvdl/nv-update-$pack_vers
			fi
		done
		zenity --height=100 --title="Zenvidia ($_6a)" --icon-name=swiss_knife --info \
		--text="$vB$(printf "$inf_06a" "$rm_packs")$end" --no-wrap
		manage_pcks
	else
		manage_pcks
	fi
}
backup_restore(){
	# list package in release directory
	unset drive_list
#	croot_repo=$(ls -1 $nvbackup| grep "nvidia.[[:digit:]]" | grep -v ".bak")
	[ -d $nvbackup ]|| mkdir -p $nvbackup
	if [ $b_type = 0 ]; then
		croot_repo=$(ls -1 $croot | grep "nvidia.")
	else
#		croot_repo=$(ls -1 $nvbackup | grep "nvidia.")
		croot_repo=$(ls -1 $nvbackup | grep "nvidia."| sed -n "s/.tar.gz//p")
	fi
	for drive in $croot_repo; do
		drive_list+=("false")
		drive_list+=("$drive")
	done
	drive_packs=$(zenity --width=400 --height=300 --list \
	--radiolist --hide-header --title="Zenvidia ($b_mod)" \
	--text "$rBB$b_msg$end" --column "1" --column "2" --separator=";" \
	"${drive_list[@]}" )
	if [ $? = 1 ]; then base_menu; fi
}
backup_pcks(){
	b_mod='backup'
	b_msg="$_6b\n$v$m_01_75 $b_mod.$end"
	b_type=0
	backup_restore
	bak_version=$(printf "$drive_packs"|sed -n "s/nvidia.//p")
#	bak_version=$(printf "$drive_packs"|sed -n "s/nvidia.\([0-9]*\).tar.gz/\1/p")
	if [[ -d $nvbackup/nvidia.$bak_version ]]; then
		zenity --width=250 --height=100 --title="Zenvidia ($_6b)" --info --icon-name=swiss_knife \
		--no-wrap --text="$j$bak_version$end$v $m_01_70.$end"
		if [ $? = 0 ]; then manage_pcks ; fi
	else
		zenity --width=250 --height=100 --title="Zenvidia ($_6b)" --question \
		--text="$v$_6e $j$drive_packs$end ?\n$_6g$end" \
		--ok-label="$CC" --cancel-label="$R"
	fi
	if [ $? = 0 ]; then
		( backup_old_version; sleep 2 )| zenity --width=400 --title="Zenvidia $b_mod" \
		--progress --pulsate --auto-close --text="$v\Backing up $j$bak_version$end driver.$end"
		ko_version=$mod_version
		if [ $ko_version != $bak_version ]; then
			zenity --width=300 --height=100 --title="Zenvidia ($_6b)" --question \
			--text="$v$_6h ?\n$_6g$end"
			if [ $? = 0 ]; then
				rm -Rf $croot/$drive_packs
			fi
		fi
		manage_pcks
	else
		manage_pcks
	fi
}
restore_pcks(){
	b_mod='restore'
	b_msg="$_6c\n$v$m_01_75 $b_mod.$end"
	b_type=1
	backup_restore
#	res_version=$(printf "$drive_packs"|sed -n "s/nvidia.//p")
	res_version=$(printf "$drive_packs"|sed -n "s/nvidia.\([0-9]*\)/\1/p")
	ver_res=$(printf "$res_version"| sed -n "s/\.//p")
#	res_version=$(printf "$drive_packs"|sed -n "s/nvidia.//;s/.bak$//p")
	if [ ! -d $croot/$drive_packs ]; then
		unset bk_list
#		mkdir -p $croot/nvidia.$res_version
		bk_list=(
			"nvidia.$res_version/$(uname -r)/*,/lib/modules/$(uname -r)/extra/,-f,depmod -a"
			"version.txt,$nvdir/,-f"
			"etc/,/,-Rf"
			"usr/,/,-Rf"
			"var/,/,-Rf"			
			"nvidia.$res_version,$croot/,-Rf"
		)
		confirm_msg=$(printf "$v$m_01_76$end." "$res_version" "$version")
		val_title="Zenvidia $b_mod"
		val_confirm="$m_01_77"
		val_back="$PM"
		val_exit="manage_pcks"
		win_confirm
		tar -zxf $nvbackup/nvidia.$res_version.tar.gz -C $nvtmp/
		(	for restor in "${bk_list[@]}"; do
				input=$(printf "$restor"| cut -d, -f1)
				output=$(printf "$restor"| cut -d, -f2)
				c_opt=$(printf "$restor"| cut -d, -f3)
				c_ext=$(printf "$restor"| cut -d, -f4)
#				cp $c_opt $nvbackup/$drive_packs/$input $output
				cp $c_opt $nvtmp/$drive_packs/$input $output
				$c_ext
			done
			cd $croot/
			ln -sf -T ./nvidia.$res_version ./nvidia
			## remove /opt/nvidia.prev_version for compatibility future restore purpose
			rm -Rf ./nvidia.$version
			## fix symlinks if necessary
			for lib_elf in {$master$ELF_32,$master$ELF_64}; do
				for links in {cfg,fbc,gtk2,gtk3}; do
					if [ $(ls -1 /usr/local/$lib_elf/libnvidia-$links.so.$res_version| \
					grep -c .) -gt 0 ]; then
						if [ $(ls -l /usr/local/$lib_elf/libnvidia-$links.so.1| \
						grep -c "$res_version" ) -eq 0 ]; then
							if [ -h /usr/local/$lib_elf/libnvidia-$links.so.1 ]; then
								rm -f /usr/local/$lib_elf/libnvidia-$links.so.1
							fi
							cd /usr/local/$lib_elf/
							ln -sf libnvidia-$links.so.$res_version libnvidia-$links.so.1
							ln -sf libnvidia-$links.so.1 libnvidia-$links.so
						fi
						if [[ -s /usr/local/$lib_elf/libnvidia-$links.so.$version ]]; then
							rm -f /usr/local/$lib_elf/libnvidia-$links.so.$version
						fi
					fi
				done
				if [ $(ls -l /usr/$lib_elf/vdpau/libvdpau_nvidia.so.1| \
				grep -c "$res_version" ) -eq 0 ]; then
					if [ -h /usr/$lib_elf/vdpau/libvdpau_nvidia.so.1 ]; then
						rm -f /usr/$lib_elf/vdpau/libvdpau_nvidia.so.1
					fi
					ln -sf $croot/nvidia.$res_version/$lib_elf/vdpau/libvdpau_nvidia.so.$res_version \
					/usr/$lib_elf/vdpau/libvdpau_nvidia.so.1 
				fi
			done
			ldconfig
		)| zenity --width=400 --title="Zenvidia $b_mod" --progress --pulsate --auto-close \
		--text="$(printf "$v$m_01_78$end" "$res_version")"
		rm -Rf $nvtmp/nvidia.$res_version
		if [ $(ls -1 /opt/nvidia.$res_version/| grep -c "$(uname -r)") -eq 0 ]; then
			confirm_msg=$(printf "$v$m_01_79$end." "$res_version")
			val_title="Zenvidia $b_mod"
			val_confirm="$m_01_80"
			val_back="$PM"
			val_exit="manage_pcks"
			win_confirm
			( version=$res_version 
#				upgrade_kernel
			if [ $use_dkms = 1 ]; then
				force=0
				nv_build_dkms 
			else
				nv_cmd_make_src
			fi
#			KERNEL=
			croot_all=$croot/nvidia.$res_version
			kernel_path=/lib/modules/$KERNEL/extra
			backup_driver
			)| zenity --width=450 --title="Zenvidia" --progress --pulsate --auto-close \
			--text="$v Restore modules missing. Building new ones...$end"
		fi
	else
		# current version overwrite ALERT message
		if [[ $ver_res -eq $ver_mod ]]; then
			warning_msg=$(printf "$vB$wrn_06c.$end" "$res_version")
			zenity ---error --title="Zenvidia $b_mod" --icon-name=xkill \
			--text="$warning_msg" --no-wrap --ok-label="$lab_06c"
			manage_pcks
		fi
	fi
	manage_pcks
}

## EDITION TOOLS
edit_script_conf(){
	edit_script=$(zenity --width=500 --height=400 --title="Zenvidia" --text-info \
	--editable --text="$v$m_01_58$end" --filename="$basic_conf" \
	--checkbox="$m_01_59" )
#	exit_stat=$?
	if [[ $(printf "$edit_script"| sed -n '1p') != '' ]]; then
		printf "$edit_script\n" > $basic_conf
	fi
#	if [ $exit_stat = 0 ]; then menu_manage
#	elif [ $exit_stat = 1 ]; then exit 0
#	fi
	menu_modif
}
edit_xorg_conf(){
	if [ $install_type = 1 ]; then
		if [ $use_bumblebee = 1 ]; then
			xorg_cfg=$tool_dir/etc/bumblebee/xorg.conf.nvidia
		elif [ $use_bumblebee = 0 ]; then
			xorg_cfg=/etc/nvidia-prime/xorg.nvidia.conf
		fi
	else
		xorg_cfg=/etc/X11/xorg.conf
	fi
	edit_xorg=$(zenity --width=500 --height=400 --title="Zenvidia" --text-info --editable \
	--text="$v\Edit xorg config file$end" --filename="$xorg_cfg" \
	--checkbox="Confirm to overwrite" )
	if [[ $(printf "$edit_xorg"| sed -n '1p') != '' ]]; then
		printf "$edit_xorg\n" > $xorg_cfg
	fi
#	if [ $? = 0 ]; then menu_manage
#	elif [ $? = 1 ]; then exit 0
#	fi
	if [ $from_install = 1 ]; then base_menu; else menu_modif; fi
}
read_help(){
	zenity --width=500 --height=400 --title="Zenvidia" --text-info \
	--text="$v\Help files for zenvidia$end" --filename="$nvdir/README.md"
	menu_manage
}
read_nv_help(){
	zenity --width=700 --height=400 --title="Zenvidia" --text-info \
	--text="$v$m_01_62$end" --filename="$help_pages/README.txt"
	menu_manage
}
read_changelog(){
	zenity --width=600 --height=400 --title="Zenvidia" --text-info \
	--text="$v$m_01_63 ($version)$end" --filename="$help_pages/NVIDIA_Changelog"
	menu_manage
}
nv_config(){
	if [ $use_bumblebee = 1 ]; then
		$SU_u $def_user -c 'optirun -b none nvidia-settings -c :8'
	else
		$SU_u $def_user -c "nvidia-settings"
	fi
	menu_modif
}
zen_notif_setup(){
	setup_validation(){
		zenity --height=100 --title="Zenvidia notification" --question --no-wrap \
		--icon-name=swiss_knife --text="$vB$(printf "$wrn_notif_01" "$_notif")$end" \
		--cancel-label="$PM"
		if [ $? = 1 ]; then menu_modif; fi
		sed -i "s/Exec=zen_notify.sh -[a-z]$/Exec=zen_notify.sh $_set/" $desk_file
		base_menu
	}
	desk_file=/home/$USER/.config/autostart/zen_notify.desktop
	unset setup_list setup_option c_set_list
	setup_option=(
	"$menu_notif_01;$m_notif_01;n"
	"$menu_notif_02;$m_notif_02;z"
	"$menu_notif_03;$m_notif_03;a"
	)
	if [ $hlp_txt = 1 ]; then
		hlp_tip="\n$hlp_notif"
		w_height='--height=350'
	else
		hlp_tip=''
		w_height='--height=300'
	fi
	st=1
	c_set_opt=$(cat $desk_file |grep "Exec"| perl -p -e "s|^.*-+([a-z])|\1|")
	for n_set in "${setup_option[@]}"; do
		m_set=$(printf "$n_set"|cut -d';' -f1)
		c_set=$(printf "$n_set"|cut -d';' -f2)
		o_set=$(printf "$n_set"|cut -d';' -f3)
		setup_list+=("false")
		setup_list+=("$st")
		setup_list+=("$m_set")
		if [[ $o_set == $c_set_opt ]]; then c_set_cnf=$c_set; fi
		st=$[ $st+1 ]
	done
	menu_notif=$(zenity --width=400 $w_height --list --radiolist --hide-header \
	--title="Zenvidia notification" \
	--text "$rBB$_3g$end$vB\n$(printf "$notif_msg" "$c_set_cnf")$hlp_tip$end" \
	--column "1" --column "2" --column "3" --hide-column=2 \
	"${setup_list[@]}" false $st "$PM")
	if [ $? = 1 ]; then base_menu; fi
	case $menu_notif in
		"1") _set='-n'; _notif="$m_notif_01" ;;
		"2") _set='-z'; _notif="$m_notif_02" ;;
		"3") _set='-a'; _notif="$m_notif_03" ;;
		"$st") menu_modif ;;
	esac
	setup_validation
}
# XXX replace by nvidia-prime-select UI
prime_setup(){
	if [ -x /usr/sbin/nvidia-prime-select ]; then
		w_text='Will you setup Prime now ?'
		zenity --height=100 --title="Zenvidia prime setup" --question --no-wrap \
		--icon-name=swiss_knife --text="$vB$w_text$end" \
		--ok-loabal="Yes, setup." --cancel-label="Not yet"
		if [ $? = 0 ]; then
			/usr/bin/nvidia-prime-ui
		fi
	fi
}
## Define language at script init
lang_define(){
	## language pack
	if [[ $LG != '' ]];then
	PACK=$LG\_PACK
	. $locale/$PACK
	else
		zenity --width=450 --title="Zenvidia" --warning \
		--text="$v\Langage pack not define.\nCheck script conf to fix.$end"
		exit 0
	fi
}
### TERTIARY MENU
glx_test(){
	unset test_list
	unset test_cmd
	if [ $use_bumblebee = 1 ]; then
		test_v='optirun -b virtualgl'
		test_p='optirun -b primus'
		test_cmd=( "$_7a (virtualgl)" "$_7b (virtualgl)" "$_7a (primus)" "$_7b (primus)" )
	else
		test_x=''
		test_cmd=( "$_7a" "$_7b" )
	fi
	nt=1
	for xtest in "${test_cmd[@]}"; do
		test_list+=("false")
		test_list+=("$nt")
		test_list+=("$xtest")
		nt=$[ $nt+1 ]
	done
	
	menu_test=$(zenity --width=400 --height=300 --list --radiolist --hide-header \
	--title="Zenvidia" --text "$rBB$_4a$end" \
	--column "1" --column "2" --column "3" --separator=";" --hide-column=2 \
	"${test_list[@]}" false $nt "$MM")
	if [ $? = 1 ]; then exit 0; fi
	g='\e[1;32m'
#	x_opt="-sb -b 5 -bg black -bd green -bw 0 -title Zenvidia_Gears"
	if [ $use_bumblebee = 1 ]; then
		if [[ $menu_test = 1 || $menu_test = 2 ]]; then test_x="$test_v"
		elif [[ $menu_test = 3 || $menu_test = 4 ]]; then test_x="$test_p"
		fi
	else
		test_x=''
	fi
	if [ $use_bumblebee = 1 ]; then
		case $menu_test in
			"1") xterm $x_opt -e "printf \"$g$m_01_64.\n\n\"; $test_x glxgears"; glx_test ;;
			"2") $test_x glxspheres; glx_test ;;
			"3") xterm $x_opt -e "printf \"$g$m_01_64.\n\n\"; $test_x glxgears"; glx_test ;;
			"4") $test_x glxspheres; glx_test ;;
			"$nt") base_menu ;;
		esac
	else
		case $menu_test in
			"1") xterm $xt_options -title Test -e "printf \"$m_01_64.\n\n\"; glxgears"; glx_test ;;
			"2") glxspheres; glx_test ;;
			"$nt") base_menu ;;
		esac
	fi
#"1") xterm $x_opt -e "printf \"$g$m_01_64.\n\n\"; glxgears"; glx_test ;;
}
menu_optimus(){
## FIXME TODO CLEAN BUMBLEBEE
#	opti_msg="\n$vB\Two solutions:$end$v
#\t- Application intergrated with Bumblebee.
#\t- One GPU at a time with Prime.$end"
	opti_msg=$msg_3_03
	menu_opti=$(zenity --width=400 --height=300 --list \
	--radiolist --hide-header --title="Zenvidia" \
	--text "$rBB\Optimus$end\n$opti_msg" \
	--column "1" --column "2" --column "3" --separator=";" --hide-column=2 \
	false 1 " Bumblebee" false 2 " Prime" false 5 "$PM" )
	if [ $? = 1 ]; then exit 0; fi
	if [ $from_menu_install = 1 ]; then
		case $menu_opti in
			"1") menu_msg="$vB$msg_3_01$end" 
			if [ $use_bumblebee != 1 ]; then
				sed -i "s/use_bumblebee=[0-9]/use_bumblebee=1/" $script_conf 
				use_bumblebee=1
			fi
			;;
			"2") menu_msg="$vB$msg_3_02$end"
			if [ $use_bumblebee != 0 ]; then
				sed -i "s/use_bumblebee=[0-9]/use_bumblebee=0/" $script_conf 
				use_bumblebee=0
			fi
			;;
		esac
	else  # from_menu_install = 0
		case $menu_opti in
			"1") menu_msg="$vB$msg_3_01$end"; build_all; base_menu ;; #  use_bumblebee=1;
			"2") menu_msg="$vB$msg_3_02$end"; prime_build; base_menu ;; #  use_bumblebee=0;
	#		"3") menu_install ;;
			"3") exit 1 ;;
		esac
	fi
}
### SUB MENU
menu_install(){
	unset install_list ins_cmd ins_list
	if [ $hlp_txt = 1 ]; then
		if [ $install_type = 0 ]; then hlp_tip="\n$hlp_01b"
		else hlp_tip="\n$hlp_01b\n$hlp_01c"; fi
		w_height='--height=300'
	else
		hlp_tip="\n$hlp_01a"
		w_height='--height=200'
	fi
	if [ $install_type = 0 ]; then
		install_list=("$_1a" "$_1b")
	else install_list=("$_1a" "$_1b" "$_1c"); fi
	n=1
	for ins_cmd in "${install_list[@]}"; do
		ins_list+=("false")
		ins_list+=("$n")
		ins_list+=("$ins_cmd")
		n=$[ $n+1 ]
	done 
	menu_inst=$(zenity --width=400 $w_height --list \
	--radiolist --hide-header --title="Zenvidia" \
	--text "$rBB$_01$end$v$hlp_tip$end" \
	--column "1" --column "2" --column "3" --separator=";" --hide-column=2 \
	"${ins_list[@]}" false $n "$MM" )
#	false 1 "$_1a" false 2 "$_1b" false 3 "$_1c" false 4 "$_1d" false 5 "$MM" )
	if [ $? = 1 ]; then base_menu; fi
	if [ $install_type = 0 ]; then
		case $menu_inst in
			"1") menu_msg="$vB$msg_1_01$end"; force=0; from_directory ;;
			"2") menu_msg="$vB$msg_1_02$end"; ui_mod=2; force=0; check_update ;;
	#		"4") menu_msg="$vB$msg_1_04$end"; nv_cmd_uninstall; base_menu ;;
			"$n") base_menu ;;
		esac
	else
		case $menu_inst in
			"1") menu_msg="$vB$msg_1_01$end"; force=0; from_directory ;;
			"2") menu_msg="$vB$msg_1_02$end"; ui_mod=2; force=0; check_update ;;
	#		"3") menu_msg="$vB$msg_1_03$end"; build_all; base_menu	;;
			"3") menu_msg="$vB$msg_1_03$end"; force=0; menu_optimus; base_menu ;;
	#		"4") menu_msg="$vB$msg_1_04$end"; nv_cmd_uninstall; base_menu ;;
			"$n") base_menu ;;
		esac
	fi
}
menu_update(){
	if [ $hlp_txt = 1 ]; then
		w_height='--height=650'
	else
		hlp_tip=''
		w_height='--height=300'
	fi
	nu=1
#	if [ $use_dkms = 1 ]; then up_cmd_list="$_2a (dkms)","$_2a (force)","$_2b (dkms)",$_2c,$_2d,$_2e
#	else up_cmd_list=$_2a,$_2b,$_2c,$_2e
#	if [ $use_dkms = 1 ]; then
#		if [ $install_type = 0 ]; then
#			up_cmd_list=("$_2e" "$_2a (dkms)" "$_2a (force)" "$_2b (dkms)" "$_2f")
#		else
#			up_cmd_list=("$_2e" "$_2a (dkms)" "$_2a (force)" "$_2b (dkms)" "$_2f" "$_2c" "$_2d")
#		fi
#		if [ $hlp_txt = 0 ]; then hlp_tip="\n$hlp_02a"
#		else hlp_tip="\n$hlp_02b\n$hlp_02e$hlp_02a\n$hlp_02c"; fi
#	else
#		if [ $install_type = 0 ]; then
#			up_cmd_list=("$_2e" "$_2a" "$_2b" "$_2f")
#		else
#			up_cmd_list=("$_2e" "$_2a" "$_2b" "$_2f" "$_2c" "$_2d")
#		fi
#		if [ $hlp_txt = 0 ]; then hlp_tip="\n$hlp_02a"
#		else hlp_tip="\n$hlp_02b\n$hlp_02e$hlp_02b\n$hlp_02c"; fi
#	fi
	if [ $hlp_txt = 0 ]; then hlp_tip="\n$hlp_02A"; fi
	if [ $install_type = 0 ]; then
		if [ $use_dkms = 1 ]; then
			up_cmd_list=("$_2e" "$_2a (dkms)" "$_2a (force)" "$_2b (dkms)" "$_2f")	
			if [ $hlp_txt = 1 ]; then hlp_tip="\n$hlp_02B\n$hlp_02a\n$hlp_02c"; fi
		else
			up_cmd_list=("$_2e" "$_2a" "$_2b" "$_2f")
			if [ $hlp_txt = 1 ]; then hlp_tip="\n$hlp_02B\n$hlp_02b\n$hlp_02c"; fi
		fi
	else
		if [ $use_dkms = 1 ]; then
			up_cmd_list=("$_2e" "$_2a (dkms)" "$_2a (force)" "$_2b (dkms)" "$_2f" "$_2c" "$_2d")
			if [ $hlp_txt = 1 ]; then hlp_tip="\n$hlp_02B\n$hlp_02a\n$hlp_02c\n$hlp_02d"; fi
		else
			up_cmd_list=("$_2e" "$_2a" "$_2b" "$_2f" "$_2c" "$_2d")
			if [ $hlp_txt = 1 ]; then hlp_tip="\n$hlp_02B\n$hlp_02b\n$hlp_02c\n$hlp_02d"; fi
		fi
	fi
	
	unset up_list
#	for up_cmd in "$_2a" "$_2b" "$_2a (dkms)" "$_2b (dkms)" "$_2c" "$_2d"; do
#	ifs=$IFS
#	IFS=$(echo -en "\n\b")
#	for up_cmd in $(echo -e "$up_cmd_list"|tr "," "\n"); do
	for up_cmd in "${up_cmd_list[@]}"; do
		up_list+=("false")
		up_list+=("$nu")
		up_list+=("$up_cmd")
		nu=$[ $nu+1 ]
	done 
#	IFS=$ifs
	menu_upd=$(zenity --width=400 $w_height --list \
	--radiolist --hide-header --title="Zenvidia" \
	--text "$rBB$_02$end$v$hlp_tip$end" \
	--column "1" --column "2" --column "3" --separator=";" --hide-column=2 \
	"${up_list[@]}" false $nu "$MM" )
#	if [ $? = 1 ]; then exit 0; fi
	if [ $? = 1 ]; then base_menu; fi
	
#	case $menu_upd in
#		"1") menu_msg="$v$msg_2_01$end"; upgrade_other=0; upgrade_kernel; base_menu ;;
#		"2") menu_msg="$v$msg_2_02$end"; upgrade_other=1; upgrade_new_kernel; base_menu ;;
#		"3") menu_msg="$v$msg_2_01 (dkms)$end"; upgrade_other=0
#			 use_dkms=0; upgrade_kernel; base_menu ;;
#		"4") menu_msg="$v$msg_2_02 (dkms)$end"; upgrade_other=1
#			 use_dkms=0; upgrade_new_kernel; base_menu ;;
#		"5") menu_msg="$v$msg_2_03$end"; local_src_ctrl; base_menu ;;
#		"6") menu_msg="$v$msg_2_04$end"; ui_mod=1; check_update  ;;
#		"7") base_menu ;;
		git_tmp=$(mktemp --tmpdir nv_git.XXXX)
		home=/home/$def_user
#		def_user=$(ls -l "$(pwd)"| cut -d' ' -f3 | sed -n "2p")
		if [ $use_dkms = 1 ]; then
			if [ $install_type = 0 ]; then
				case $menu_upd in
					"1") menu_msg="$v$msg_2_06$end"; ui_mod=1; check_update ;;
					"2") menu_msg="$v$msg_2_01 (dkms)$end"
						 upgrade_other=0; use_dkms=1; upgrade_kernel; base_menu ;;
					"3") menu_msg="$v$msg_2_01 (force)$end" 
						 upgrade_other=0; use_dkms=0; upgrade_kernel; base_menu ;;
					"4") menu_msg="$v$msg_2_02 (dkms)$end"
						 upgrade_other=1; use_dkms=1; upgrade_new_kernel; base_menu ;;
					"5") menu_msg="$v$msg_2_05$end"; zenvidia_update; base_menu ;;
					"$nu") base_menu ;;
				esac
			else
				case $menu_upd in
					"1") menu_msg="$v$msg_2_06$end"
						 ui_mod=1; check_update ;;
					"2") menu_msg="$v$msg_2_01 (dkms)$end"
						 upgrade_other=0; use_dkms=1; upgrade_kernel; base_menu ;;
					"3") menu_msg="$v$msg_2_01 (force)$end" 
						 upgrade_other=0; use_dkms=0; upgrade_kernel; base_menu ;;
					"4") menu_msg="$v$msg_2_02 (dkms)$end"
						 upgrade_other=1; use_dkms=1; upgrade_new_kernel; base_menu ;;
					"5") menu_msg="$v$msg_2_05$end"; zenvidia_update; base_menu ;;
					"6") menu_msg="$v$msg_2_03$end"; local_src_ctrl; base_menu ;;
					"7") menu_msg="$v$msg_2_04$end"; prime_src_ctrl; base_menu ;;
					"$nu") base_menu ;;
				esac
			fi
		else # use_dkms = 0
			if [ $install_type = 0 ];then
				case $menu_upd in
					"1") menu_msg="$v$msg_2_06$end"; ui_mod=1; check_update  ;;
					"2") menu_msg="$v$msg_2_01$end"; upgrade_other=0; upgrade_kernel; base_menu ;;
					"3") menu_msg="$v$msg_2_02$end"; upgrade_other=1; upgrade_new_kernel; base_menu ;;
					"4") menu_msg="$v$msg_2_05$end"; zenvidia_update; base_menu ;;
					"$nu") base_menu ;;
				esac
			else
				case $menu_upd in
					"1") menu_msg="$v$msg_2_06$end"; ui_mod=1; check_update  ;;
					"2") menu_msg="$v$msg_2_01$end"; upgrade_other=0; upgrade_kernel; base_menu ;;
					"3") menu_msg="$v$msg_2_02$end"; upgrade_other=1; upgrade_new_kernel; base_menu ;;
					"4") menu_msg="$v$msg_2_05$end"; zenvidia_update; base_menu ;;
					"5") menu_msg="$v$msg_2_03$end"; local_src_ctrl; base_menu ;;
					"6") menu_msg="$v$msg_2_04$end"; prime_src_ctrl; base_menu ;;
					"$nu") base_menu ;;
				esac
			fi
		fi
#	esac
}
menu_modif(){
	## XXX TODO Avoid bumblebee
	if [ $hlp_txt = 1 ]; then
		if [ $install_type = 0 ]; then hlp_tip="\n$hlp_03b"
		else hlp_tip="\n$hlp_03b\n$hlp_03c"; fi
		w_height='--height=750'
	else
		hlp_tip="\n$hlp_03a"
		w_height='--height=300'
	fi
	nd=1
	## XXX TODO to remove after all bumblebee cleaning 
#	if [ $install_type = 0 ] ;then
#		mod_menu_list=("$_3a" "$_3b" "$_3c" "$_3d" "$_3e" "$_3f" "$_3g")
#	else
#		mod_menu_list=("$_3a" "$_3b" "$_3c" "$_3d" "$_3e" "$_3f" "$_3g" "$_3h")
#	fi
	install_type=0
	mod_menu_list=("$_3a" "$_3b" "$_3c" "$_3d" "$_3f" "$_3g")
	unset mod_list
	for mod_cmd in "${mod_menu_list[@]}" ; do
		mod_list+=("false")
		mod_list+=("$nd")
		mod_list+=("$mod_cmd")
		nd=$[ $nd+1 ]
	done
	menu_mod=$(zenity --width=400 $w_height --list \
	--radiolist --hide-header --title="Zenvidia" \
	--text "$rBB$_03$end$v$hlp_tip$end" \
	--column "1" --column "2" --column "3" --separator=";" --hide-column=2 \
	"${mod_list[@]}" false $nd "$MM")
	if [ $? = 1 ]; then base_menu; fi
	case $install_type in
		0) case $menu_mod in
			"1") from_install=0; edit_xorg_conf ;;
			"2") edit_script_conf ;;
			"3") nv_config ;;
			"4") manage_pcks ;;
			"5") fix_broken_install ;;
			"6") zen_notif_setup ;;
			"$nd") base_menu ;;
			esac ;;
		1) case $menu_mod in
			"1") from_install=0; edit_xorg_conf ;;
			"2") edit_script_conf ;;
			"3") nv_config ;;
			"4") manage_pcks ;;
			"5") optimus_source_rebuild ;;
			"6") fix_broken_install ;;
			"7") zen_notif_setup ;;
			"8") from_menu_install=0; prime_setup ;;
			"$nd") base_menu ;;
			esac ;;
	esac
#	0) case $menu_mod in
#	"1") from_install=0; edit_xorg_conf ;;
#	"2") edit_script_conf ;;
#	"3") nv_config ;;
#	"4") manage_pcks ;;
#	"5") optimus_source_rebuild ;;
#	"6") fix_broken_install ;;
#	"7") zen_notif_setup ;;
#	"$nd") base_menu ;;
#	esac ;;
}
menu_manage(){
	if [ $hlp_txt = 1 ]; then
		hlp_tip="\n$hlp_04b"
		w_height='--height=500'
	else
		hlp_tip="\n$hlp_04a"
		w_height='--height=300'
	fi
	nm=1
	unset mng_list
	for mng_cmd in "$_4a" "$_4b ($version)" "$_4c ($version)" "$_4d"; do
		mng_list+=("false")
		mng_list+=("$nm")
		mng_list+=("$mng_cmd")
		nm=$[ $nm+1 ]
	done
	menu_mng=$(zenity --width=400 $w_height --list \
	--radiolist --hide-header --title="Zenvidia" \
	--text "$rBB$_04$end$v$hlp_tip$end" \
	--column "1" --column "2" --column "3" --separator=";" --hide-column=2 \
	"${mng_list[@]}" false $nm "$MM")
	if [ $? = 1 ]; then exit 0; fi
	case $menu_mng in
		"1") glx_test ;;
		"2") read_nv_help ;;
		"3") read_changelog ;;
		"4") read_help ;;
		"$nm") base_menu ;;
	esac
}
### MAIN MENUS
base_menu(){
	devices=$(
	for e in $pci_dev_nb; do
		printf "$vB$msg_00_04$end $j${dev[$e]}\t($(printf "${vnd[$e]}"|awk '{print $1}'))$end\n" $((${dev_n[$e]}+1))
	done
	)
	# remove deplist list in case of relaunching first because an update asking to
	unset deplist
	w_height=450
	[ $hlp_txt = 0 ]|| { hlp_wrn="$hlp_tip_txt"; w_height=$(($w_height+50)); }	
	menu_cmd=$(zenity --height=$w_height --title="Zenvidia" --list --radiolist --hide-header \
	--text "$rBB$msg_00_01$end
$vB\n$msg_00_02$end $j$DISTRO$end
$vB$msg_0_00$end $j$ARCH$end
$devices 
$vB$msg_0_01$end $j$version$end
$vB$msg_0_02$end $j$KERNEL$end
$vB$msg_0_03$end $j$GCC$end
$vB$msg_0_04$end $j$NV_bin_ver$end\n
$v$msg_0_05 : $end$dir_msg
$v$msg_00_06 : $end $j$cnx_msg$end
\n$v$hlp_wrn$ansWN$end" \
	--column "1" --column "2" --column "3" --separator=";" --hide-column=2 \
	false 1 "$_01" false 2 "$_02" false 3 "$_03" false 4 "$_04" )
	if [ $? = 1 ]; then exit 0; fi
	case $menu_cmd in
		"1") if_update=0; menu_install ;;
		"2") if_update=1; menu_update ;;
		"3") if_update=1; menu_modif ;;
		"4") if_update=1; menu_manage ;;
	esac
}
install_controls(){
	# check nvidia dir presence
	if [ -d $install_dir/NVIDIA ] ; then
		dir_msg="$j $ansOK$end"
	else		
		dir_msg="$j $ansNF\n$y$msg_00_07$end"
		zenity --width=400 --error --no-wrap --title="Zenvidia" \
		--text="$dir_msg"
	fi
	# check/change run packages permission
	nvdl_last=$(ls -1 $nvdl/|sed -n '$p')
	if [[ -s $nvdl/$nvdl_last ]] ; then
		for changes in $(ls -1 $nvdl ); do
			if [[ $(stat -c "%a" $nvdl/$changes) != 755 ]]; then
				chmod 755 $nvdl/$changes
			fi
		done
	fi
}
first_start_cmd(){
	### FIRST START
	unset dir_list
	dir_list=("$buildtmp" "$nvtmp" "$nvlog" "$nvupdate" "$nvdl" "$locale")
	for i_dir in "${dir_list[@]}"; do
		[ -d $i_dir ]|| mkdir -p $i_dir
	done
	dep_control
	[[ -s $tool_dir/bin/nvidia-installer ]]|| installer_build
	sed -i "s/first_start=1/first_start=0/" $script_conf
	# check nvidia dir is correctly created
	if [ -d $install_dir/NVIDIA ] ; then
		dir_msg="$j $ansOK$end"
	else		
		dir_msg="$j $ansNF\n$y$msg_00_07$end"
		zenity --width=400 --error --no-wrap --title="Zenvidia" \
		--text="$dir_msg"
	fi
	connection_control
	base_menu
}
start_cmd(){
	dep_control
	install_controls
	connection_control
	base_menu
}

### SCRIPT INTRO
#if [[ $(cat $locale/script.conf| grep "LG=$LG") == '' ]]; then
if [[ $(cat $basic_conf| grep "LG=$LG") == '' ]]; then
	echo -e "$r no language pack chosen\n EN = english\n FR = Français.$t"
	exit 0
else
	lang_define
fi

# INITIALS checks
compil_vars
libclass
#root_id # << distro_id < distro
distro_id
distro
version_id
ID
arch
if [ $first_start = 1 ]; then
	first_start_cmd
else
	start_cmd
fi
exit 0
